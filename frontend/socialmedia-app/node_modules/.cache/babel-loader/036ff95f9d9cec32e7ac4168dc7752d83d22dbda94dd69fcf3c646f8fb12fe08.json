{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../../config';\n\n// Updated to accept page parameter\nexport const fetchFeed = createAsyncThunk('feed/fetchFeed', async ({\n  token,\n  page\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/interactions/feed/?page=${page}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return {\n      posts: response.data,\n      page\n    };\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst feedSlice = createSlice({\n  name: 'feed',\n  initialState: {\n    posts: [],\n    loading: false,\n    error: null,\n    hasMore: true // Added hasMore to track if more posts are available\n  },\n  reducers: {\n    updatePostLikes: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\n      if (postIndex !== -1) {\n        state.posts[postIndex].likes = action.payload.likes;\n        state.posts[postIndex].total_likes = action.payload.totalLikes;\n      }\n    },\n    updatePostComments: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\n      if (postIndex !== -1) {\n        state.posts[postIndex].comments = action.payload.comments;\n        state.posts[postIndex].total_comments = action.payload.totalComments;\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFeed.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchFeed.fulfilled, (state, action) => {\n      const {\n        posts,\n        page\n      } = action.payload;\n      state.loading = false;\n      state.error = null;\n      if (page === 1) {\n        // Replace posts if it's the first page\n        state.posts = posts;\n      } else {\n        // Append posts for subsequent pages\n        state.posts = [...state.posts, ...posts];\n      }\n\n      // Determine if there are more posts to load\n      state.hasMore = posts.length > 0;\n    }).addCase(fetchFeed.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload.message;\n    });\n  }\n});\nexport const {\n  updatePostLikes,\n  updatePostComments\n} = feedSlice.actions;\nexport default feedSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","BASE_URL","fetchFeed","token","page","rejectWithValue","response","get","headers","Authorization","posts","data","error","feedSlice","name","initialState","loading","hasMore","reducers","updatePostLikes","state","action","postIndex","findIndex","post","id","payload","postId","likes","total_likes","totalLikes","updatePostComments","comments","total_comments","totalComments","extraReducers","builder","addCase","pending","fulfilled","length","rejected","message","actions","reducer"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/features/auth/feedSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'; \r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../../config';\r\n\r\n// Updated to accept page parameter\r\nexport const fetchFeed = createAsyncThunk(\r\n  'feed/fetchFeed',\r\n  async ({ token, page }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/api/interactions/feed/?page=${page}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return { posts: response.data, page };\r\n    } catch (error) {\r\n      return rejectWithValue(error.response.data);\r\n    }\r\n  }\r\n);\r\n\r\nconst feedSlice = createSlice({\r\n  name: 'feed',\r\n  initialState: {\r\n    posts: [],\r\n    loading: false,\r\n    error: null,\r\n    hasMore: true, // Added hasMore to track if more posts are available\r\n  },\r\n  reducers: {\r\n    updatePostLikes: (state, action) => {\r\n      const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\r\n      if (postIndex !== -1) {\r\n        state.posts[postIndex].likes = action.payload.likes;\r\n        state.posts[postIndex].total_likes = action.payload.totalLikes;\r\n      }\r\n    },\r\n    updatePostComments: (state, action) => {\r\n      const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\r\n      if (postIndex !== -1) {\r\n        state.posts[postIndex].comments = action.payload.comments;\r\n        state.posts[postIndex].total_comments = action.payload.totalComments;\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchFeed.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchFeed.fulfilled, (state, action) => {\r\n        const { posts, page } = action.payload;\r\n        state.loading = false;\r\n        state.error = null;\r\n\r\n        if (page === 1) {\r\n          // Replace posts if it's the first page\r\n          state.posts = posts;\r\n        } else {\r\n          // Append posts for subsequent pages\r\n          state.posts = [...state.posts, ...posts];\r\n        }\r\n\r\n        // Determine if there are more posts to load\r\n        state.hasMore = posts.length > 0;\r\n      })\r\n      .addCase(fetchFeed.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { updatePostLikes, updatePostComments } = feedSlice.actions;\r\n\r\nexport default feedSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}