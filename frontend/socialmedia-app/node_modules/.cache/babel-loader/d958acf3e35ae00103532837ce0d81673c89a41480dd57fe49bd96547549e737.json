{"ast":null,"code":"var _jsxFileName = \"H:\\\\SecondProject-DjangoReact\\\\frontend\\\\socialmedia-app\\\\src\\\\pages\\\\FeedPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchFeed, updatePostLikes, updatePostComments } from '../features/feed/feedSlice';\nimport { connectWebSocket } from '../websocket';\nimport { handleLike } from '../features/auth/likeSlice';\nimport { handleBookmark } from '../features/auth/bookmarkSlice';\nimport FeedPostComponent from '../components/FeedPostComponent';\nimport axios from 'axios';\nimport { BASE_URL } from '../config';\nimport { showSuccessToast } from '../components/CustomToast';\nimport { showErrorToast } from '../components/ErroToast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FeedPage = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    posts,\n    loading,\n    error\n  } = useSelector(state => state.feed);\n  const user = useSelector(state => state.user.user);\n  const token = useSelector(state => state.auth.token);\n  const bookmarkPosts = useSelector(state => state.bookmarkPosts);\n  const [openCommentId, setOpenCommentId] = useState(null);\n  const [newComment, setNewComment] = useState(\"\");\n  const [replyingToCommentId, setReplyingToCommentId] = useState(null);\n  const [comments, setComments] = useState({});\n  const [commentText, setCommentText] = useState('');\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const likedPosts = useSelector(state => state.likedPosts);\n  useEffect(() => {\n    dispatch(fetchFeed(token));\n\n    // Set up WebSocket for real-time updates\n    const ws = connectWebSocket(token);\n    ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'LIKE_UPDATE') {\n        dispatch(updatePostLikes({\n          postId: data.postId,\n          likes: data.likes,\n          totalLikes: data.totalLikes\n        }));\n      } else if (data.type === 'COMMENT_UPDATE') {\n        dispatch(updatePostComments({\n          postId: data.postId,\n          comments: data.comments,\n          totalComments: data.totalComments\n        }));\n      }\n    };\n    return () => {\n      ws.close();\n    };\n  }, [dispatch, token]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  const postLike = async postId => {\n    dispatch(handleLike({\n      postId,\n      token,\n      userId: user.id\n    }));\n  };\n  const handleToggleComments = postId => {\n    if (openCommentId === postId) {\n      setOpenCommentId(null); // Close the comments section if it's already open\n    } else {\n      setOpenCommentId(postId); // Open the comments section for the specific post\n    }\n  };\n  const toggleBookmark = postId => {\n    const isBookmarked = bookmarkPosts[postId];\n    dispatch(handleBookmark({\n      postId,\n      token,\n      isBookmarked\n    }));\n  };\n  const handleSubmitComment = async (postId, commentText, parentId = null) => {\n    if (!commentText.trim()) {\n      showErrorToast('Empty Comment Box');\n      return;\n    }\n    console.log(postId, commentText, user.id, parentId, token);\n    try {\n      const response = await axios.post(`${BASE_URL}/api/comments/`, {\n        post: postId,\n        content: commentText,\n        user: user.id,\n        parent: parentId // Include parentId here\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const newCommentData = response.data;\n      setComments(prevComments => ({\n        ...prevComments,\n        [postId]: [...(prevComments[postId] || []), newCommentData]\n      }));\n      setNewComment(\"\");\n      setReplyingToCommentId(null);\n      showSuccessToast(\"Comment submitted successfully\");\n      fetchPosts();\n    } catch (error) {\n      showErrorToast(\"Error submitting comment\");\n    }\n  };\n  const handleAddEmoji = emoji => {\n    setCommentText(prev => prev + emoji.native); // Append the selected emoji to the comment text\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto mt-8\",\n    children: /*#__PURE__*/_jsxDEV(FeedPostComponent, {\n      posts: posts,\n      user: user,\n      likedPosts: likedPosts,\n      handleLike: postLike,\n      handleToggleComments: handleToggleComments,\n      handleBookmark: toggleBookmark,\n      bookmarkPosts: bookmarkPosts,\n      openCommentId: openCommentId,\n      handleSubmitComment: handleSubmitComment,\n      replyingToCommentId: replyingToCommentId,\n      setReplyingToCommentId: setReplyingToCommentId,\n      setCommentText: setCommentText,\n      setShowEmojiPicker: setShowEmojiPicker,\n      showEmojiPicker: showEmojiPicker,\n      handleAddEmoji: handleAddEmoji,\n      comments: comments,\n      commentText: commentText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(FeedPage, \"nsn1Um7X4M9gGvbw9j9e/ve1ZE0=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n_c = FeedPage;\nexport default FeedPage;\nvar _c;\n$RefreshReg$(_c, \"FeedPage\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","fetchFeed","updatePostLikes","updatePostComments","connectWebSocket","handleLike","handleBookmark","FeedPostComponent","axios","BASE_URL","showSuccessToast","showErrorToast","jsxDEV","_jsxDEV","FeedPage","_s","dispatch","posts","loading","error","state","feed","user","token","auth","bookmarkPosts","openCommentId","setOpenCommentId","newComment","setNewComment","replyingToCommentId","setReplyingToCommentId","comments","setComments","commentText","setCommentText","showEmojiPicker","setShowEmojiPicker","likedPosts","ws","onmessage","event","data","JSON","parse","type","postId","likes","totalLikes","totalComments","close","children","fileName","_jsxFileName","lineNumber","columnNumber","className","postLike","userId","id","handleToggleComments","toggleBookmark","isBookmarked","handleSubmitComment","parentId","trim","console","log","response","post","content","parent","headers","Authorization","newCommentData","prevComments","fetchPosts","handleAddEmoji","emoji","prev","native","_c","$RefreshReg$"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/pages/FeedPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchFeed, updatePostLikes, updatePostComments } from '../features/feed/feedSlice';\r\nimport { connectWebSocket } from '../websocket';\r\nimport { handleLike } from '../features/auth/likeSlice';\r\nimport { handleBookmark } from '../features/auth/bookmarkSlice';\r\nimport FeedPostComponent from '../components/FeedPostComponent';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../config';\r\nimport { showSuccessToast } from '../components/CustomToast';\r\nimport { showErrorToast } from '../components/ErroToast';\r\nconst FeedPage = () => {\r\n  const dispatch = useDispatch();\r\n  const { posts, loading, error } = useSelector((state) => state.feed);\r\n  const user = useSelector((state) => state.user.user);\r\n  const token = useSelector((state) => state.auth.token);\r\n  const bookmarkPosts = useSelector((state) => state.bookmarkPosts);\r\n  const [openCommentId, setOpenCommentId] = useState(null); \r\n  const [newComment, setNewComment] = useState(\"\"); \r\n  const [replyingToCommentId, setReplyingToCommentId] = useState(null); \r\n  const [comments, setComments] = useState({}); \r\n  const [commentText, setCommentText] = useState('');\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const likedPosts = useSelector((state) => state.likedPosts);\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFeed(token));\r\n\r\n    // Set up WebSocket for real-time updates\r\n    const ws = connectWebSocket(token);\r\n    ws.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.type === 'LIKE_UPDATE') {\r\n        dispatch(updatePostLikes({\r\n          postId: data.postId,\r\n          likes: data.likes,\r\n          totalLikes: data.totalLikes,\r\n        }));\r\n      } else if (data.type === 'COMMENT_UPDATE') {\r\n        dispatch(updatePostComments({\r\n          postId: data.postId,\r\n          comments: data.comments,\r\n          totalComments: data.totalComments,\r\n        }));\r\n      }\r\n    };\r\n\r\n    return () => {\r\n      ws.close();\r\n    };\r\n  }, [dispatch, token]);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"text-red-500\">{error}</p>;\r\n  }\r\n  const postLike = async  (postId) => {\r\n    dispatch(handleLike({ postId, token ,userId:user.id}));\r\n  };\r\n  const handleToggleComments = (postId) => {\r\n    if (openCommentId === postId) {\r\n      setOpenCommentId(null); // Close the comments section if it's already open\r\n    } else {\r\n      setOpenCommentId(postId); // Open the comments section for the specific post\r\n    }\r\n  };\r\n  const toggleBookmark = (postId) => {\r\n    const isBookmarked = bookmarkPosts[postId];\r\n    dispatch(handleBookmark({ postId, token, isBookmarked }));\r\n  };\r\n  const handleSubmitComment = async (postId, commentText, parentId = null) => {\r\n    if (!commentText.trim()) {\r\n      showErrorToast('Empty Comment Box');\r\n      return;\r\n    }\r\n    console.log(postId,commentText,user.id,parentId,token);\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/api/comments/`, {\r\n        post: postId,\r\n        content: commentText,\r\n        user: user.id,\r\n        parent: parentId, // Include parentId here\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n  \r\n      const newCommentData = response.data;\r\n      setComments((prevComments) => ({\r\n        ...prevComments,\r\n        [postId]: [...(prevComments[postId] || []), newCommentData],\r\n      }));\r\n  \r\n      setNewComment(\"\");\r\n      setReplyingToCommentId(null);\r\n     \r\n      showSuccessToast(\"Comment submitted successfully\");\r\n      fetchPosts();\r\n    } catch (error) {\r\n      showErrorToast(\"Error submitting comment\");\r\n    }\r\n  };\r\n  const handleAddEmoji = (emoji) => {\r\n    setCommentText((prev) => prev + emoji.native); // Append the selected emoji to the comment text\r\n  };\r\n \r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto mt-8\">\r\n      <FeedPostComponent  posts={posts}\r\n      user={user}\r\n      likedPosts={likedPosts}\r\n      handleLike={postLike}\r\n      handleToggleComments={handleToggleComments}\r\n      handleBookmark={toggleBookmark}\r\n      bookmarkPosts={bookmarkPosts}\r\n      openCommentId={openCommentId}\r\n      handleSubmitComment={handleSubmitComment}\r\n      replyingToCommentId={replyingToCommentId}\r\n      setReplyingToCommentId={setReplyingToCommentId}\r\n      setCommentText={setCommentText}\r\n      setShowEmojiPicker={setShowEmojiPicker}\r\n      showEmojiPicker={showEmojiPicker}\r\n      handleAddEmoji={handleAddEmoji}\r\n      comments={comments}\r\n      commentText={commentText} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}