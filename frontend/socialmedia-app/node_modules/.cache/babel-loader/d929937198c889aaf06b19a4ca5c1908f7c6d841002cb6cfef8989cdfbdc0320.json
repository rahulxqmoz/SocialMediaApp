{"ast":null,"code":"var _jsxFileName = \"H:\\\\SecondProject-DjangoReact\\\\frontend\\\\socialmedia-app\\\\src\\\\components\\\\ChatDialog.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addMessage, createChatRoom, fetchChatRooms, fetchMessages, sendMessage } from '../features/auth/chatSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatDialog = ({\n  roomName,\n  user\n}) => {\n  _s();\n  console.log(`roomName: ${roomName}`);\n  const dispatch = useDispatch();\n  const token = useSelector(state => state.auth.token);\n  const messages = useSelector(state => state.chat.messages);\n  const [messageInput, setMessageInput] = useState('');\n  const socketRef = useRef(null); // Using useRef for socket\n  const chatRooms = useSelector(state => state.chat.rooms);\n  const currentUser = useSelector(state => state.user.user);\n  console.log(messages);\n  console.log(user.id, currentUser.id);\n  useEffect(() => {\n    if (roomName && token) {\n      // Step 1: Fetch all chat rooms to check if the room exists\n      dispatch(fetchChatRooms({\n        token\n      })).then(action => {\n        const roomExists = chatRooms.some(room => room.name === roomName);\n        if (roomExists) {\n          // Room exists, fetch messages for this room\n          dispatch(fetchMessages({\n            roomName,\n            token\n          }));\n        } else {\n          // Room doesn't exist, create it first\n          dispatch(createChatRoom({\n            roomName,\n            participants: [user.id, currentUser.id],\n            token\n          })).then(() => {\n            // After creating the room, fetch the messages\n            dispatch(fetchMessages({\n              roomName,\n              token\n            }));\n          });\n        }\n      });\n    }\n\n    // WebSocket connection setup\n    socketRef.current = new WebSocket(`ws://localhost:8000/ws/chat/${roomName}/?token=${token}`);\n    socketRef.current.onmessage = e => {\n      const data = JSON.parse(e.data);\n      if (data.type === 'message') {\n        console.log(`socket send`);\n        dispatch(addMessage({\n          sender: data.sender,\n          message: data.message,\n          timestamp: new Date().toISOString() // Or use the timestamp from data if available\n        }));\n      }\n    };\n    socketRef.current.onclose = () => {\n      console.log('WebSocket closed. Attempting to reconnect...');\n    };\n    return () => {\n      socketRef.current.close();\n    };\n  }, [roomName, token, dispatch]);\n  const handleSendMessage = () => {\n    if (messageInput && socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(JSON.stringify({\n        message: messageInput,\n        user_id: user.id\n      }));\n      dispatch(sendMessage({\n        roomName,\n        message: messageInput,\n        token\n      }));\n      setMessageInput('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 shadow-md rounded-lg p-4 h-96 flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages flex-1 overflow-y-auto mb-4\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `p-2 rounded-lg mb-2 ${msg.sender === 'You' ? 'bg-blue-500 text-white self-end' : 'bg-gray-300 text-black self-start'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"block\",\n          children: msg.sender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: msg.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs text-gray-500\",\n          children: new Date(msg.timestamp).toLocaleTimeString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"flex-1 border rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500\",\n        value: messageInput,\n        onChange: e => setMessageInput(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage(),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"ml-2 bg-blue-500 text-white rounded-lg px-4 py-2 hover:bg-blue-600 transition duration-200\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatDialog, \"T2rPGY88X7dYexj1Disnt4CgKRM=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector];\n});\n_c = ChatDialog;\nexport default ChatDialog;\nvar _c;\n$RefreshReg$(_c, \"ChatDialog\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useDispatch","useSelector","addMessage","createChatRoom","fetchChatRooms","fetchMessages","sendMessage","jsxDEV","_jsxDEV","ChatDialog","roomName","user","_s","console","log","dispatch","token","state","auth","messages","chat","messageInput","setMessageInput","socketRef","chatRooms","rooms","currentUser","id","then","action","roomExists","some","room","name","participants","current","WebSocket","onmessage","e","data","JSON","parse","type","sender","message","timestamp","Date","toISOString","onclose","close","handleSendMessage","readyState","OPEN","send","stringify","user_id","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","value","onChange","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/components/ChatDialog.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addMessage, createChatRoom, fetchChatRooms, fetchMessages,sendMessage } from '../features/auth/chatSlice';\r\n\r\nconst ChatDialog = ({ roomName, user }) => {\r\n    console.log(`roomName: ${roomName}`);\r\n    const dispatch = useDispatch();\r\n    const token = useSelector((state) => state.auth.token);\r\n    const messages = useSelector((state) => state.chat.messages);\r\n    const [messageInput, setMessageInput] = useState('');\r\n    const socketRef = useRef(null); // Using useRef for socket\r\n    const chatRooms = useSelector((state) => state.chat.rooms);\r\n    const currentUser = useSelector((state) => state.user.user);\r\n    console.log(messages)\r\n    console.log(user.id,currentUser.id)\r\n\r\n    useEffect(() => {\r\n        if (roomName && token) {\r\n            // Step 1: Fetch all chat rooms to check if the room exists\r\n            dispatch(fetchChatRooms({ token })).then((action) => {\r\n                const roomExists = chatRooms.some(room => room.name === roomName);\r\n\r\n                if (roomExists) {\r\n                    // Room exists, fetch messages for this room\r\n                    dispatch(fetchMessages({ roomName, token }));\r\n                } else {\r\n                    // Room doesn't exist, create it first\r\n                    dispatch(createChatRoom({ roomName,participants:[user.id,currentUser.id], token }))\r\n                        .then(() => {\r\n                            // After creating the room, fetch the messages\r\n                            dispatch(fetchMessages({ roomName, token }));\r\n                        });\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        // WebSocket connection setup\r\n        socketRef.current = new WebSocket(`ws://localhost:8000/ws/chat/${roomName}/?token=${token}`);\r\n        \r\n        socketRef.current.onmessage = (e) => {\r\n            const data = JSON.parse(e.data);\r\n            if (data.type === 'message') {\r\n                console.log(`socket send`)\r\n                dispatch(addMessage({\r\n                    sender: data.sender,\r\n                    message: data.message,\r\n                    timestamp: new Date().toISOString(),  // Or use the timestamp from data if available\r\n                }));\r\n            }\r\n        };\r\n\r\n        socketRef.current.onclose = () => {\r\n            console.log('WebSocket closed. Attempting to reconnect...');\r\n        };\r\n\r\n        return () => {\r\n            socketRef.current.close();\r\n        };\r\n    }, [roomName, token, dispatch]);\r\n\r\n    const handleSendMessage = () => {\r\n        if (messageInput && socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n            socketRef.current.send(JSON.stringify({\r\n                message: messageInput,\r\n                user_id: user.id,\r\n            }));\r\n            dispatch(sendMessage({ roomName, message: messageInput, token }));\r\n            setMessageInput('');\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"bg-gray-100 shadow-md rounded-lg p-4 h-96 flex flex-col\">\r\n        <div className=\"chat-messages flex-1 overflow-y-auto mb-4\">\r\n            {messages.map((msg, index) => (\r\n                <div key={index} className={`p-2 rounded-lg mb-2 ${msg.sender === 'You' ? 'bg-blue-500 text-white self-end' : 'bg-gray-300 text-black self-start'}`}>\r\n                    <strong className=\"block\">{msg.sender}</strong>\r\n                    <span>{msg.message}</span>\r\n                    <span className=\"text-xs text-gray-500\">{new Date(msg.timestamp).toLocaleTimeString()}</span>\r\n                </div>\r\n            ))}\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n            <input\r\n                type=\"text\"\r\n                className=\"flex-1 border rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                value={messageInput}\r\n                onChange={(e) => setMessageInput(e.target.value)}\r\n                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\r\n                placeholder=\"Type your message...\"\r\n            />\r\n            <button \r\n                onClick={handleSendMessage} \r\n                className=\"ml-2 bg-blue-500 text-white rounded-lg px-4 py-2 hover:bg-blue-600 transition duration-200\"\r\n            >\r\n                Send\r\n            </button>\r\n        </div>\r\n    </div>\r\n    \r\n    );\r\n};\r\n\r\nexport default ChatDialog;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}