{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../../config';\nimport { showSuccessToast } from '../../components/CustomToast';\nimport { showErrorToast } from '../../components/ErroToast';\n\n// Async thunk to fetch comments for a post\nexport const fetchComments = createAsyncThunk('comments/fetchComments', async ({\n  postId,\n  token\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments/`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return {\n      postId,\n      comments: response.data\n    };\n  } catch (error) {\n    return rejectWithValue('Error fetching comments');\n  }\n});\n\n// Async thunk to handle submitting a comment\nexport const handleSubmitComment = createAsyncThunk('comments/handleSubmitComment', async ({\n  postId,\n  commentText,\n  userId,\n  parentId,\n  token\n}, {\n  dispatch,\n  rejectWithValue\n}) => {\n  if (!commentText.trim()) {\n    showErrorToast('Empty Comment Box');\n    return rejectWithValue('Empty comment');\n  }\n  try {\n    const response = await axios.post(`${BASE_URL}/api/comments/`, {\n      post: postId,\n      content: commentText,\n      user: userId,\n      parent: parentId\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const newCommentData = response.data;\n    dispatch(addComment({\n      postId,\n      newComment: newCommentData\n    }));\n    showSuccessToast('Comment submitted successfully');\n  } catch (error) {\n    showErrorToast('Error submitting comment');\n    return rejectWithValue('Error submitting comment');\n  }\n});\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState: {\n    commentsByPostId: {},\n    loading: false,\n    error: null\n  },\n  reducers: {\n    addComment: (state, action) => {\n      const {\n        postId,\n        newComment\n      } = action.payload;\n      if (state.commentsByPostId[postId]) {\n        state.commentsByPostId[postId].push(newComment);\n      } else {\n        state.commentsByPostId[postId] = [newComment];\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchComments.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchComments.fulfilled, (state, action) => {\n      const {\n        postId,\n        comments\n      } = action.payload;\n      state.commentsByPostId[postId] = comments;\n      state.loading = false;\n    }).addCase(fetchComments.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }).addCase(handleSubmitComment.rejected, (state, action) => {\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  addComment\n} = commentsSlice.actions;\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","BASE_URL","showSuccessToast","showErrorToast","fetchComments","postId","token","rejectWithValue","response","get","headers","Authorization","comments","data","error","handleSubmitComment","commentText","userId","parentId","dispatch","trim","post","content","user","parent","newCommentData","addComment","newComment","commentsSlice","name","initialState","commentsByPostId","loading","reducers","state","action","payload","push","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/features/auth/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../../config';\r\nimport { showSuccessToast } from '../../components/CustomToast';\r\nimport { showErrorToast } from '../../components/ErroToast';\r\n\r\n// Async thunk to fetch comments for a post\r\nexport const fetchComments = createAsyncThunk(\r\n  'comments/fetchComments',\r\n  async ({ postId, token }, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments/`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return { postId, comments: response.data };\r\n    } catch (error) {\r\n      return rejectWithValue('Error fetching comments');\r\n    }\r\n  }\r\n);\r\n\r\n// Async thunk to handle submitting a comment\r\nexport const handleSubmitComment = createAsyncThunk(\r\n  'comments/handleSubmitComment',\r\n  async ({ postId, commentText, userId, parentId, token }, { dispatch, rejectWithValue }) => {\r\n    if (!commentText.trim()) {\r\n      showErrorToast('Empty Comment Box');\r\n      return rejectWithValue('Empty comment');\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        `${BASE_URL}/api/comments/`,\r\n        {\r\n          post: postId,\r\n          content: commentText,\r\n          user: userId,\r\n          parent: parentId,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      const newCommentData = response.data;\r\n      dispatch(addComment({ postId, newComment: newCommentData }));\r\n      showSuccessToast('Comment submitted successfully');\r\n    } catch (error) {\r\n      showErrorToast('Error submitting comment');\r\n      return rejectWithValue('Error submitting comment');\r\n    }\r\n  }\r\n);\r\n\r\nconst commentsSlice = createSlice({\r\n  name: 'comments',\r\n  initialState: {\r\n    commentsByPostId: {},\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    addComment: (state, action) => {\r\n      const { postId, newComment } = action.payload;\r\n      if (state.commentsByPostId[postId]) {\r\n        state.commentsByPostId[postId].push(newComment);\r\n      } else {\r\n        state.commentsByPostId[postId] = [newComment];\r\n      }\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchComments.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchComments.fulfilled, (state, action) => {\r\n        const { postId, comments } = action.payload;\r\n        state.commentsByPostId[postId] = comments;\r\n        state.loading = false;\r\n      })\r\n      .addCase(fetchComments.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(handleSubmitComment.rejected, (state, action) => {\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addComment } = commentsSlice.actions;\r\n\r\nexport default commentsSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}