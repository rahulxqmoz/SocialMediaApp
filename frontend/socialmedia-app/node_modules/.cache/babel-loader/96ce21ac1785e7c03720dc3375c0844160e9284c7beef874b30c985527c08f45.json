{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar path = require('path');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nvar utils = require('./utils');\nvar ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];\n\n/**\n * Create an ffmpeg command\n *\n * Can be called with or without the 'new' operator, and the 'input' parameter\n * may be specified as 'options.source' instead (or passed later with the\n * addInput method).\n *\n * @constructor\n * @param {String|ReadableStream} [input] input file path or readable stream\n * @param {Object} [options] command options\n * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods\n * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows\n * @param {Number} [options.priority=0] alias for `niceness`\n * @param {String} [options.presets=\"fluent-ffmpeg/lib/presets\"] directory to load presets from\n * @param {String} [options.preset=\"fluent-ffmpeg/lib/presets\"] alias for `presets`\n * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited\n * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds\n * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter\n */\nfunction FfmpegCommand(input, options) {\n  // Make 'new' optional\n  if (!(this instanceof FfmpegCommand)) {\n    return new FfmpegCommand(input, options);\n  }\n  EventEmitter.call(this);\n  if (typeof input === 'object' && !('readable' in input)) {\n    // Options object passed directly\n    options = input;\n  } else {\n    // Input passed first\n    options = options || {};\n    options.source = input;\n  }\n\n  // Add input if present\n  this._inputs = [];\n  if (options.source) {\n    this.input(options.source);\n  }\n\n  // Add target-less output for backwards compatibility\n  this._outputs = [];\n  this.output();\n\n  // Create argument lists\n  var self = this;\n  ['_global', '_complexFilters'].forEach(function (prop) {\n    self[prop] = utils.args();\n  });\n\n  // Set default option values\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n  options.niceness = options.niceness || options.priority || 0;\n\n  // Save options\n  this.options = options;\n\n  // Setup logger\n  this.logger = options.logger || {\n    debug: function () {},\n    info: function () {},\n    warn: function () {},\n    error: function () {}\n  };\n}\nutil.inherits(FfmpegCommand, EventEmitter);\nmodule.exports = FfmpegCommand;\n\n/**\n * Clone an ffmpeg command\n *\n * This method is useful when you want to process the same input multiple times.\n * It returns a new FfmpegCommand instance with the exact same options.\n *\n * All options set _after_ the clone() call will only be applied to the instance\n * it has been called on.\n *\n * @example\n *   var command = ffmpeg('/path/to/source.avi')\n *     .audioCodec('libfaac')\n *     .videoCodec('libx264')\n *     .format('mp4');\n *\n *   command.clone()\n *     .size('320x200')\n *     .save('/path/to/output-small.mp4');\n *\n *   command.clone()\n *     .size('640x400')\n *     .save('/path/to/output-medium.mp4');\n *\n *   command.save('/path/to/output-original-size.mp4');\n *\n * @method FfmpegCommand#clone\n * @return FfmpegCommand\n */\nFfmpegCommand.prototype.clone = function () {\n  var clone = new FfmpegCommand();\n  var self = this;\n\n  // Clone options and logger\n  clone.options = this.options;\n  clone.logger = this.logger;\n\n  // Clone inputs\n  clone._inputs = this._inputs.map(function (input) {\n    return {\n      source: input.source,\n      options: input.options.clone()\n    };\n  });\n\n  // Create first output\n  if ('target' in this._outputs[0]) {\n    // We have outputs set, don't clone them and create first output\n    clone._outputs = [];\n    clone.output();\n  } else {\n    // No outputs set, clone first output options\n    clone._outputs = [clone._currentOutput = {\n      flags: {}\n    }];\n    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function (key) {\n      clone._currentOutput[key] = self._currentOutput[key].clone();\n    });\n    if (this._currentOutput.sizeData) {\n      clone._currentOutput.sizeData = {};\n      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);\n    }\n    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);\n  }\n\n  // Clone argument lists\n  ['_global', '_complexFilters'].forEach(function (prop) {\n    clone[prop] = self[prop].clone();\n  });\n  return clone;\n};\n\n/* Add methods from options submodules */\n\nrequire('./options/inputs')(FfmpegCommand.prototype);\nrequire('./options/audio')(FfmpegCommand.prototype);\nrequire('./options/video')(FfmpegCommand.prototype);\nrequire('./options/videosize')(FfmpegCommand.prototype);\nrequire('./options/output')(FfmpegCommand.prototype);\nrequire('./options/custom')(FfmpegCommand.prototype);\nrequire('./options/misc')(FfmpegCommand.prototype);\n\n/* Add processor methods */\n\nrequire('./processor')(FfmpegCommand.prototype);\n\n/* Add capabilities methods */\n\nrequire('./capabilities')(FfmpegCommand.prototype);\nFfmpegCommand.setFfmpegPath = function (path) {\n  new FfmpegCommand().setFfmpegPath(path);\n};\nFfmpegCommand.setFfprobePath = function (path) {\n  new FfmpegCommand().setFfprobePath(path);\n};\nFfmpegCommand.setFlvtoolPath = function (path) {\n  new FfmpegCommand().setFlvtoolPath(path);\n};\nFfmpegCommand.availableFilters = FfmpegCommand.getAvailableFilters = function (callback) {\n  new FfmpegCommand().availableFilters(callback);\n};\nFfmpegCommand.availableCodecs = FfmpegCommand.getAvailableCodecs = function (callback) {\n  new FfmpegCommand().availableCodecs(callback);\n};\nFfmpegCommand.availableFormats = FfmpegCommand.getAvailableFormats = function (callback) {\n  new FfmpegCommand().availableFormats(callback);\n};\nFfmpegCommand.availableEncoders = FfmpegCommand.getAvailableEncoders = function (callback) {\n  new FfmpegCommand().availableEncoders(callback);\n};\n\n/* Add ffprobe methods */\n\nrequire('./ffprobe')(FfmpegCommand.prototype);\nFfmpegCommand.ffprobe = function (file) {\n  var instance = new FfmpegCommand(file);\n  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));\n};\n\n/* Add processing recipes */\n\nrequire('./recipes')(FfmpegCommand.prototype);","map":{"version":3,"names":["path","require","util","EventEmitter","utils","ARGLISTS","FfmpegCommand","input","options","call","source","_inputs","_outputs","output","self","forEach","prop","args","stdoutLines","presets","preset","join","__dirname","niceness","priority","logger","debug","info","warn","error","inherits","module","exports","prototype","clone","map","_currentOutput","flags","key","sizeData","copy","setFfmpegPath","setFfprobePath","setFlvtoolPath","availableFilters","getAvailableFilters","callback","availableCodecs","getAvailableCodecs","availableFormats","getAvailableFormats","availableEncoders","getAvailableEncoders","ffprobe","file","instance","apply","Array","slice","arguments"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/node_modules/fluent-ffmpeg/lib/fluent-ffmpeg.js"],"sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar path = require('path');\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\nvar utils = require('./utils');\nvar ARGLISTS = ['_global', '_audio', '_audioFilters', '_video', '_videoFilters', '_sizeFilters', '_complexFilters'];\n\n\n/**\n * Create an ffmpeg command\n *\n * Can be called with or without the 'new' operator, and the 'input' parameter\n * may be specified as 'options.source' instead (or passed later with the\n * addInput method).\n *\n * @constructor\n * @param {String|ReadableStream} [input] input file path or readable stream\n * @param {Object} [options] command options\n * @param {Object} [options.logger=<no logging>] logger object with 'error', 'warning', 'info' and 'debug' methods\n * @param {Number} [options.niceness=0] ffmpeg process niceness, ignored on Windows\n * @param {Number} [options.priority=0] alias for `niceness`\n * @param {String} [options.presets=\"fluent-ffmpeg/lib/presets\"] directory to load presets from\n * @param {String} [options.preset=\"fluent-ffmpeg/lib/presets\"] alias for `presets`\n * @param {String} [options.stdoutLines=100] maximum lines of ffmpeg output to keep in memory, use 0 for unlimited\n * @param {Number} [options.timeout=<no timeout>] ffmpeg processing timeout in seconds\n * @param {String|ReadableStream} [options.source=<no input>] alias for the `input` parameter\n */\nfunction FfmpegCommand(input, options) {\n  // Make 'new' optional\n  if (!(this instanceof FfmpegCommand)) {\n    return new FfmpegCommand(input, options);\n  }\n\n  EventEmitter.call(this);\n\n  if (typeof input === 'object' && !('readable' in input)) {\n    // Options object passed directly\n    options = input;\n  } else {\n    // Input passed first\n    options = options || {};\n    options.source = input;\n  }\n\n  // Add input if present\n  this._inputs = [];\n  if (options.source) {\n    this.input(options.source);\n  }\n\n  // Add target-less output for backwards compatibility\n  this._outputs = [];\n  this.output();\n\n  // Create argument lists\n  var self = this;\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    self[prop] = utils.args();\n  });\n\n  // Set default option values\n  options.stdoutLines = 'stdoutLines' in options ? options.stdoutLines : 100;\n  options.presets = options.presets || options.preset || path.join(__dirname, 'presets');\n  options.niceness = options.niceness || options.priority || 0;\n\n  // Save options\n  this.options = options;\n\n  // Setup logger\n  this.logger = options.logger || {\n    debug: function() {},\n    info: function() {},\n    warn: function() {},\n    error: function() {}\n  };\n}\nutil.inherits(FfmpegCommand, EventEmitter);\nmodule.exports = FfmpegCommand;\n\n\n/**\n * Clone an ffmpeg command\n *\n * This method is useful when you want to process the same input multiple times.\n * It returns a new FfmpegCommand instance with the exact same options.\n *\n * All options set _after_ the clone() call will only be applied to the instance\n * it has been called on.\n *\n * @example\n *   var command = ffmpeg('/path/to/source.avi')\n *     .audioCodec('libfaac')\n *     .videoCodec('libx264')\n *     .format('mp4');\n *\n *   command.clone()\n *     .size('320x200')\n *     .save('/path/to/output-small.mp4');\n *\n *   command.clone()\n *     .size('640x400')\n *     .save('/path/to/output-medium.mp4');\n *\n *   command.save('/path/to/output-original-size.mp4');\n *\n * @method FfmpegCommand#clone\n * @return FfmpegCommand\n */\nFfmpegCommand.prototype.clone = function() {\n  var clone = new FfmpegCommand();\n  var self = this;\n\n  // Clone options and logger\n  clone.options = this.options;\n  clone.logger = this.logger;\n\n  // Clone inputs\n  clone._inputs = this._inputs.map(function(input) {\n    return {\n      source: input.source,\n      options: input.options.clone()\n    };\n  });\n\n  // Create first output\n  if ('target' in this._outputs[0]) {\n    // We have outputs set, don't clone them and create first output\n    clone._outputs = [];\n    clone.output();\n  } else {\n    // No outputs set, clone first output options\n    clone._outputs = [\n      clone._currentOutput = {\n        flags: {}\n      }\n    ];\n\n    ['audio', 'audioFilters', 'video', 'videoFilters', 'sizeFilters', 'options'].forEach(function(key) {\n      clone._currentOutput[key] = self._currentOutput[key].clone();\n    });\n\n    if (this._currentOutput.sizeData) {\n      clone._currentOutput.sizeData = {};\n      utils.copy(this._currentOutput.sizeData, clone._currentOutput.sizeData);\n    }\n\n    utils.copy(this._currentOutput.flags, clone._currentOutput.flags);\n  }\n\n  // Clone argument lists\n  ['_global', '_complexFilters'].forEach(function(prop) {\n    clone[prop] = self[prop].clone();\n  });\n\n  return clone;\n};\n\n\n/* Add methods from options submodules */\n\nrequire('./options/inputs')(FfmpegCommand.prototype);\nrequire('./options/audio')(FfmpegCommand.prototype);\nrequire('./options/video')(FfmpegCommand.prototype);\nrequire('./options/videosize')(FfmpegCommand.prototype);\nrequire('./options/output')(FfmpegCommand.prototype);\nrequire('./options/custom')(FfmpegCommand.prototype);\nrequire('./options/misc')(FfmpegCommand.prototype);\n\n\n/* Add processor methods */\n\nrequire('./processor')(FfmpegCommand.prototype);\n\n\n/* Add capabilities methods */\n\nrequire('./capabilities')(FfmpegCommand.prototype);\n\nFfmpegCommand.setFfmpegPath = function(path) {\n  (new FfmpegCommand()).setFfmpegPath(path);\n};\n\nFfmpegCommand.setFfprobePath = function(path) {\n  (new FfmpegCommand()).setFfprobePath(path);\n};\n\nFfmpegCommand.setFlvtoolPath = function(path) {\n  (new FfmpegCommand()).setFlvtoolPath(path);\n};\n\nFfmpegCommand.availableFilters =\nFfmpegCommand.getAvailableFilters = function(callback) {\n  (new FfmpegCommand()).availableFilters(callback);\n};\n\nFfmpegCommand.availableCodecs =\nFfmpegCommand.getAvailableCodecs = function(callback) {\n  (new FfmpegCommand()).availableCodecs(callback);\n};\n\nFfmpegCommand.availableFormats =\nFfmpegCommand.getAvailableFormats = function(callback) {\n  (new FfmpegCommand()).availableFormats(callback);\n};\n\nFfmpegCommand.availableEncoders =\nFfmpegCommand.getAvailableEncoders = function(callback) {\n  (new FfmpegCommand()).availableEncoders(callback);\n};\n\n\n/* Add ffprobe methods */\n\nrequire('./ffprobe')(FfmpegCommand.prototype);\n\nFfmpegCommand.ffprobe = function(file) {\n  var instance = new FfmpegCommand(file);\n  instance.ffprobe.apply(instance, Array.prototype.slice.call(arguments, 1));\n};\n\n/* Add processing recipes */\n\nrequire('./recipes')(FfmpegCommand.prototype);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}