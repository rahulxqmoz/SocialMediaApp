{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\n/*\n *! Size helpers\n */\n\n/**\n * Return filters to pad video to width*height,\n *\n * @param {Number} width output width\n * @param {Number} height output height\n * @param {Number} aspect video aspect ratio (without padding)\n * @param {Number} color padding color\n * @return scale/pad filters\n * @private\n */\nfunction getScalePadFilters(width, height, aspect, color) {\n  /*\n    let a be the input aspect ratio, A be the requested aspect ratio\n     if a > A, padding is done on top and bottom\n    if a < A, padding is done on left and right\n   */\n\n  return [\n  /*\n    In both cases, we first have to scale the input to match the requested size.\n    When using computed width/height, we truncate them to multiples of 2\n   */\n  {\n    filter: 'scale',\n    options: {\n      w: 'if(gt(a,' + aspect + '),' + width + ',trunc(' + height + '*a/2)*2)',\n      h: 'if(lt(a,' + aspect + '),' + height + ',trunc(' + width + '/a/2)*2)'\n    }\n  },\n  /*\n    Then we pad the scaled input to match the target size\n    (here iw and ih refer to the padding input, i.e the scaled output)\n   */\n\n  {\n    filter: 'pad',\n    options: {\n      w: width,\n      h: height,\n      x: 'if(gt(a,' + aspect + '),0,(' + width + '-iw)/2)',\n      y: 'if(lt(a,' + aspect + '),0,(' + height + '-ih)/2)',\n      color: color\n    }\n  }];\n}\n\n/**\n * Recompute size filters\n *\n * @param {Object} output\n * @param {String} key newly-added parameter name ('size', 'aspect' or 'pad')\n * @param {String} value newly-added parameter value\n * @return filter string array\n * @private\n */\nfunction createSizeFilters(output, key, value) {\n  // Store parameters\n  var data = output.sizeData = output.sizeData || {};\n  data[key] = value;\n  if (!('size' in data)) {\n    // No size requested, keep original size\n    return [];\n  }\n\n  // Try to match the different size string formats\n  var fixedSize = data.size.match(/([0-9]+)x([0-9]+)/);\n  var fixedWidth = data.size.match(/([0-9]+)x\\?/);\n  var fixedHeight = data.size.match(/\\?x([0-9]+)/);\n  var percentRatio = data.size.match(/\\b([0-9]{1,3})%/);\n  var width, height, aspect;\n  if (percentRatio) {\n    var ratio = Number(percentRatio[1]) / 100;\n    return [{\n      filter: 'scale',\n      options: {\n        w: 'trunc(iw*' + ratio + '/2)*2',\n        h: 'trunc(ih*' + ratio + '/2)*2'\n      }\n    }];\n  } else if (fixedSize) {\n    // Round target size to multiples of 2\n    width = Math.round(Number(fixedSize[1]) / 2) * 2;\n    height = Math.round(Number(fixedSize[2]) / 2) * 2;\n    aspect = width / height;\n    if (data.pad) {\n      return getScalePadFilters(width, height, aspect, data.pad);\n    } else {\n      // No autopad requested, rescale to target size\n      return [{\n        filter: 'scale',\n        options: {\n          w: width,\n          h: height\n        }\n      }];\n    }\n  } else if (fixedWidth || fixedHeight) {\n    if ('aspect' in data) {\n      // Specified aspect ratio\n      width = fixedWidth ? fixedWidth[1] : Math.round(Number(fixedHeight[1]) * data.aspect);\n      height = fixedHeight ? fixedHeight[1] : Math.round(Number(fixedWidth[1]) / data.aspect);\n\n      // Round to multiples of 2\n      width = Math.round(width / 2) * 2;\n      height = Math.round(height / 2) * 2;\n      if (data.pad) {\n        return getScalePadFilters(width, height, data.aspect, data.pad);\n      } else {\n        // No autopad requested, rescale to target size\n        return [{\n          filter: 'scale',\n          options: {\n            w: width,\n            h: height\n          }\n        }];\n      }\n    } else {\n      // Keep input aspect ratio\n\n      if (fixedWidth) {\n        return [{\n          filter: 'scale',\n          options: {\n            w: Math.round(Number(fixedWidth[1]) / 2) * 2,\n            h: 'trunc(ow/a/2)*2'\n          }\n        }];\n      } else {\n        return [{\n          filter: 'scale',\n          options: {\n            w: 'trunc(oh*a/2)*2',\n            h: Math.round(Number(fixedHeight[1]) / 2) * 2\n          }\n        }];\n      }\n    }\n  } else {\n    throw new Error('Invalid size specified: ' + data.size);\n  }\n}\n\n/*\n *! Video size-related methods\n */\n\nmodule.exports = function (proto) {\n  /**\n   * Keep display aspect ratio\n   *\n   * This method is useful when converting an input with non-square pixels to an output format\n   * that does not support non-square pixels.  It rescales the input so that the display aspect\n   * ratio is the same.\n   *\n   * @method FfmpegCommand#keepDAR\n   * @category Video size\n   * @aliases keepPixelAspect,keepDisplayAspect,keepDisplayAspectRatio\n   *\n   * @return FfmpegCommand\n   */\n  proto.keepPixelAspect =\n  // Only for compatibility, this is not about keeping _pixel_ aspect ratio\n  proto.keepDisplayAspect = proto.keepDisplayAspectRatio = proto.keepDAR = function () {\n    return this.videoFilters([{\n      filter: 'scale',\n      options: {\n        w: 'if(gt(sar,1),iw*sar,iw)',\n        h: 'if(lt(sar,1),ih/sar,ih)'\n      }\n    }, {\n      filter: 'setsar',\n      options: '1'\n    }]);\n  };\n\n  /**\n   * Set output size\n   *\n   * The 'size' parameter can have one of 4 forms:\n   * - 'X%': rescale to xx % of the original size\n   * - 'WxH': specify width and height\n   * - 'Wx?': specify width and compute height from input aspect ratio\n   * - '?xH': specify height and compute width from input aspect ratio\n   *\n   * Note: both dimensions will be truncated to multiples of 2.\n   *\n   * @method FfmpegCommand#size\n   * @category Video size\n   * @aliases withSize,setSize\n   *\n   * @param {String} size size string, eg. '33%', '320x240', '320x?', '?x240'\n   * @return FfmpegCommand\n   */\n  proto.withSize = proto.setSize = proto.size = function (size) {\n    var filters = createSizeFilters(this._currentOutput, 'size', size);\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n    return this;\n  };\n\n  /**\n   * Set output aspect ratio\n   *\n   * @method FfmpegCommand#aspect\n   * @category Video size\n   * @aliases withAspect,withAspectRatio,setAspect,setAspectRatio,aspectRatio\n   *\n   * @param {String|Number} aspect aspect ratio (number or 'X:Y' string)\n   * @return FfmpegCommand\n   */\n  proto.withAspect = proto.withAspectRatio = proto.setAspect = proto.setAspectRatio = proto.aspect = proto.aspectRatio = function (aspect) {\n    var a = Number(aspect);\n    if (isNaN(a)) {\n      var match = aspect.match(/^(\\d+):(\\d+)$/);\n      if (match) {\n        a = Number(match[1]) / Number(match[2]);\n      } else {\n        throw new Error('Invalid aspect ratio: ' + aspect);\n      }\n    }\n    var filters = createSizeFilters(this._currentOutput, 'aspect', a);\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n    return this;\n  };\n\n  /**\n   * Enable auto-padding the output\n   *\n   * @method FfmpegCommand#autopad\n   * @category Video size\n   * @aliases applyAutopadding,applyAutoPadding,applyAutopad,applyAutoPad,withAutopadding,withAutoPadding,withAutopad,withAutoPad,autoPad\n   *\n   * @param {Boolean} [pad=true] enable/disable auto-padding\n   * @param {String} [color='black'] pad color\n   */\n  proto.applyAutopadding = proto.applyAutoPadding = proto.applyAutopad = proto.applyAutoPad = proto.withAutopadding = proto.withAutoPadding = proto.withAutopad = proto.withAutoPad = proto.autoPad = proto.autopad = function (pad, color) {\n    // Allow autopad(color)\n    if (typeof pad === 'string') {\n      color = pad;\n      pad = true;\n    }\n\n    // Allow autopad() and autopad(undefined, color)\n    if (typeof pad === 'undefined') {\n      pad = true;\n    }\n    var filters = createSizeFilters(this._currentOutput, 'pad', pad ? color || 'black' : false);\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n    return this;\n  };\n};","map":{"version":3,"names":["getScalePadFilters","width","height","aspect","color","filter","options","w","h","x","y","createSizeFilters","output","key","value","data","sizeData","fixedSize","size","match","fixedWidth","fixedHeight","percentRatio","ratio","Number","Math","round","pad","Error","module","exports","proto","keepPixelAspect","keepDisplayAspect","keepDisplayAspectRatio","keepDAR","videoFilters","withSize","setSize","filters","_currentOutput","sizeFilters","clear","withAspect","withAspectRatio","setAspect","setAspectRatio","aspectRatio","a","isNaN","applyAutopadding","applyAutoPadding","applyAutopad","applyAutoPad","withAutopadding","withAutoPadding","withAutopad","withAutoPad","autoPad","autopad"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/node_modules/fluent-ffmpeg/lib/options/videosize.js"],"sourcesContent":["/*jshint node:true*/\n'use strict';\n\n/*\n *! Size helpers\n */\n\n\n/**\n * Return filters to pad video to width*height,\n *\n * @param {Number} width output width\n * @param {Number} height output height\n * @param {Number} aspect video aspect ratio (without padding)\n * @param {Number} color padding color\n * @return scale/pad filters\n * @private\n */\nfunction getScalePadFilters(width, height, aspect, color) {\n  /*\n    let a be the input aspect ratio, A be the requested aspect ratio\n\n    if a > A, padding is done on top and bottom\n    if a < A, padding is done on left and right\n   */\n\n  return [\n    /*\n      In both cases, we first have to scale the input to match the requested size.\n      When using computed width/height, we truncate them to multiples of 2\n     */\n    {\n      filter: 'scale',\n      options: {\n        w: 'if(gt(a,' + aspect + '),' + width + ',trunc(' + height + '*a/2)*2)',\n        h: 'if(lt(a,' + aspect + '),' + height + ',trunc(' + width + '/a/2)*2)'\n      }\n    },\n\n    /*\n      Then we pad the scaled input to match the target size\n      (here iw and ih refer to the padding input, i.e the scaled output)\n     */\n\n    {\n      filter: 'pad',\n      options: {\n        w: width,\n        h: height,\n        x: 'if(gt(a,' + aspect + '),0,(' + width + '-iw)/2)',\n        y: 'if(lt(a,' + aspect + '),0,(' + height + '-ih)/2)',\n        color: color\n      }\n    }\n  ];\n}\n\n\n/**\n * Recompute size filters\n *\n * @param {Object} output\n * @param {String} key newly-added parameter name ('size', 'aspect' or 'pad')\n * @param {String} value newly-added parameter value\n * @return filter string array\n * @private\n */\nfunction createSizeFilters(output, key, value) {\n  // Store parameters\n  var data = output.sizeData = output.sizeData || {};\n  data[key] = value;\n\n  if (!('size' in data)) {\n    // No size requested, keep original size\n    return [];\n  }\n\n  // Try to match the different size string formats\n  var fixedSize = data.size.match(/([0-9]+)x([0-9]+)/);\n  var fixedWidth = data.size.match(/([0-9]+)x\\?/);\n  var fixedHeight = data.size.match(/\\?x([0-9]+)/);\n  var percentRatio = data.size.match(/\\b([0-9]{1,3})%/);\n  var width, height, aspect;\n\n  if (percentRatio) {\n    var ratio = Number(percentRatio[1]) / 100;\n    return [{\n      filter: 'scale',\n      options: {\n        w: 'trunc(iw*' + ratio + '/2)*2',\n        h: 'trunc(ih*' + ratio + '/2)*2'\n      }\n    }];\n  } else if (fixedSize) {\n    // Round target size to multiples of 2\n    width = Math.round(Number(fixedSize[1]) / 2) * 2;\n    height = Math.round(Number(fixedSize[2]) / 2) * 2;\n\n    aspect = width / height;\n\n    if (data.pad) {\n      return getScalePadFilters(width, height, aspect, data.pad);\n    } else {\n      // No autopad requested, rescale to target size\n      return [{ filter: 'scale', options: { w: width, h: height }}];\n    }\n  } else if (fixedWidth || fixedHeight) {\n    if ('aspect' in data) {\n      // Specified aspect ratio\n      width = fixedWidth ? fixedWidth[1] : Math.round(Number(fixedHeight[1]) * data.aspect);\n      height = fixedHeight ? fixedHeight[1] : Math.round(Number(fixedWidth[1]) / data.aspect);\n\n      // Round to multiples of 2\n      width = Math.round(width / 2) * 2;\n      height = Math.round(height / 2) * 2;\n\n      if (data.pad) {\n        return getScalePadFilters(width, height, data.aspect, data.pad);\n      } else {\n        // No autopad requested, rescale to target size\n        return [{ filter: 'scale', options: { w: width, h: height }}];\n      }\n    } else {\n      // Keep input aspect ratio\n\n      if (fixedWidth) {\n        return [{\n          filter: 'scale',\n          options: {\n            w: Math.round(Number(fixedWidth[1]) / 2) * 2,\n            h: 'trunc(ow/a/2)*2'\n          }\n        }];\n      } else {\n        return [{\n          filter: 'scale',\n          options: {\n            w: 'trunc(oh*a/2)*2',\n            h: Math.round(Number(fixedHeight[1]) / 2) * 2\n          }\n        }];\n      }\n    }\n  } else {\n    throw new Error('Invalid size specified: ' + data.size);\n  }\n}\n\n\n/*\n *! Video size-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Keep display aspect ratio\n   *\n   * This method is useful when converting an input with non-square pixels to an output format\n   * that does not support non-square pixels.  It rescales the input so that the display aspect\n   * ratio is the same.\n   *\n   * @method FfmpegCommand#keepDAR\n   * @category Video size\n   * @aliases keepPixelAspect,keepDisplayAspect,keepDisplayAspectRatio\n   *\n   * @return FfmpegCommand\n   */\n  proto.keepPixelAspect = // Only for compatibility, this is not about keeping _pixel_ aspect ratio\n  proto.keepDisplayAspect =\n  proto.keepDisplayAspectRatio =\n  proto.keepDAR = function() {\n    return this.videoFilters([\n      {\n        filter: 'scale',\n        options: {\n          w: 'if(gt(sar,1),iw*sar,iw)',\n          h: 'if(lt(sar,1),ih/sar,ih)'\n        }\n      },\n      {\n        filter: 'setsar',\n        options: '1'\n      }\n    ]);\n  };\n\n\n  /**\n   * Set output size\n   *\n   * The 'size' parameter can have one of 4 forms:\n   * - 'X%': rescale to xx % of the original size\n   * - 'WxH': specify width and height\n   * - 'Wx?': specify width and compute height from input aspect ratio\n   * - '?xH': specify height and compute width from input aspect ratio\n   *\n   * Note: both dimensions will be truncated to multiples of 2.\n   *\n   * @method FfmpegCommand#size\n   * @category Video size\n   * @aliases withSize,setSize\n   *\n   * @param {String} size size string, eg. '33%', '320x240', '320x?', '?x240'\n   * @return FfmpegCommand\n   */\n  proto.withSize =\n  proto.setSize =\n  proto.size = function(size) {\n    var filters = createSizeFilters(this._currentOutput, 'size', size);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n\n\n  /**\n   * Set output aspect ratio\n   *\n   * @method FfmpegCommand#aspect\n   * @category Video size\n   * @aliases withAspect,withAspectRatio,setAspect,setAspectRatio,aspectRatio\n   *\n   * @param {String|Number} aspect aspect ratio (number or 'X:Y' string)\n   * @return FfmpegCommand\n   */\n  proto.withAspect =\n  proto.withAspectRatio =\n  proto.setAspect =\n  proto.setAspectRatio =\n  proto.aspect =\n  proto.aspectRatio = function(aspect) {\n    var a = Number(aspect);\n    if (isNaN(a)) {\n      var match = aspect.match(/^(\\d+):(\\d+)$/);\n      if (match) {\n        a = Number(match[1]) / Number(match[2]);\n      } else {\n        throw new Error('Invalid aspect ratio: ' + aspect);\n      }\n    }\n\n    var filters = createSizeFilters(this._currentOutput, 'aspect', a);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n\n\n  /**\n   * Enable auto-padding the output\n   *\n   * @method FfmpegCommand#autopad\n   * @category Video size\n   * @aliases applyAutopadding,applyAutoPadding,applyAutopad,applyAutoPad,withAutopadding,withAutoPadding,withAutopad,withAutoPad,autoPad\n   *\n   * @param {Boolean} [pad=true] enable/disable auto-padding\n   * @param {String} [color='black'] pad color\n   */\n  proto.applyAutopadding =\n  proto.applyAutoPadding =\n  proto.applyAutopad =\n  proto.applyAutoPad =\n  proto.withAutopadding =\n  proto.withAutoPadding =\n  proto.withAutopad =\n  proto.withAutoPad =\n  proto.autoPad =\n  proto.autopad = function(pad, color) {\n    // Allow autopad(color)\n    if (typeof pad === 'string') {\n      color = pad;\n      pad = true;\n    }\n\n    // Allow autopad() and autopad(undefined, color)\n    if (typeof pad === 'undefined') {\n      pad = true;\n    }\n\n    var filters = createSizeFilters(this._currentOutput, 'pad', pad ? color || 'black' : false);\n\n    this._currentOutput.sizeFilters.clear();\n    this._currentOutput.sizeFilters(filters);\n\n    return this;\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}