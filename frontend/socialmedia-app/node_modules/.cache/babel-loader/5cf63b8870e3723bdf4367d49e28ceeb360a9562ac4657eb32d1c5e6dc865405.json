{"ast":null,"code":"var _jsxFileName = \"H:\\\\SecondProject-DjangoReact\\\\frontend\\\\socialmedia-app\\\\src\\\\pages\\\\ProfilePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { BASE_URL } from '../config';\nimport Modal from 'react-modal';\nimport 'cropperjs/dist/cropper.css';\nimport { logout, updateUserProfileImage } from '../features/auth/userSlice';\nimport { showErrorToast } from '../components/ErroToast';\nimport ImageCropper from '../components/Cropper';\nimport 'react-quill/dist/quill.snow.css';\nimport PostBox from '../components/ProfilePageComponents/PostBoxComponent';\nimport { showSuccessToast } from '../components/CustomToast';\nimport ProfileHeader from '../components/ProfilePageComponents/ProfileHeader';\nimport ProfileSection from '../components/ProfilePageComponents/ProfileSection';\nimport PostListComponent from '../components/ProfilePageComponents/PostListComponent';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchProfile, fetchPosts, fetchBookmarks, updateLikeStatus } from '../features/posts/profileSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst ProfilePage = () => {\n  _s();\n  const [profile, setProfile] = useState(null);\n  const [error, setError] = useState(null);\n  const [posts, setPosts] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalImage, setModalImage] = useState('');\n  const [openCommentId, setOpenCommentId] = useState(null);\n  const [imageType, setImageType] = useState(''); // 'cover' or 'profile'\n  const cropperRef = useRef(null);\n  const [likedPosts, setLikedPosts] = useState({});\n  const [comments, setComments] = useState({});\n  const [newComment, setNewComment] = useState(\"\");\n  const [replyingToCommentId, setReplyingToCommentId] = useState(null);\n  const user = useSelector(state => state.user.user);\n  const token = useSelector(state => state.auth.token);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  const [followerCount, setFollowerCount] = useState(0);\n  const [followingCount, setFollowingCount] = useState(0);\n  const [bookmarks, setBookmarks] = useState([]);\n  const [bookmarkPosts, setbookmarkPosts] = useState({});\n  const [loading, setLoading] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // const fetchBookmarks = async () => {\n  //   try {\n  //     const response = await axios.get(`${BASE_URL}/api/bookmarks`, {\n  //       headers: {\n  //           Authorization: `Bearer ${token}`,\n  //       },\n  //     });  // Fetch user's bookmarks\n  //     setBookmarks(response.data.map(bookmark => bookmark.post));\n  //   } catch (error) {\n  //     console.error('Error fetching bookmarks:', error);\n  //   }\n  // };\n  const fetchComments = async postId => {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments/`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setComments(prevComments => ({\n        ...prevComments,\n        [postId]: response.data\n      }));\n    } catch (error) {\n      console.log(\"Error fetching comments\");\n    }\n  };\n\n  // const fetchPosts = async () => {\n  //   try {\n  //     const response = await axios.get(`${BASE_URL}/api/posts/?user_id=${user.id}`, {\n  //    headers: {\n  //        Authorization: `Bearer ${token}`,\n  //    },\n  //  });\n  //    setPosts(response.data); \n  //    console.log(response.data)// Set the fetched posts\n  //  } catch (err) {\n  //    console.log(\"Error fetching posts\");\n  //  }\n  // };\n  useEffect(() => {\n    // const fetchProfile = async () => {\n    //   try {\n    //     const response = await axios.get(`${BASE_URL}/api/users/profile/${user?.id}/`, {\n    //       headers: {\n    //         Authorization: `Bearer ${token}`,\n    //       },\n    //     });\n\n    //     setProfile(response.data);\n    //     setFollowerCount(response.data.followers);\n    //     setFollowingCount(response.data.following);\n    //   } catch (err) {\n    //     console.log(`errorstatus:${err.response.status}`)\n    //     if (err.response?.status === 401) {\n    //       showErrorToast(\"Session timed out!.Please login agian.\")\n    //       setTimeout(() => {\n    //         handleLogout(); \n    //       }, 1000);\n    //     } else {\n\n    //       setError(err.response?.data?.detail || 'An error occurred while fetching the profile.');\n    //     }\n    //   }\n    // };\n\n    if (user && token) {\n      fetchProfile();\n      fetchPosts();\n      fetchBookmarks();\n    }\n  }, [user, token]);\n  useEffect(() => {\n    if (posts.length > 0) {\n      posts.forEach(post => {\n        console.log(`Correct post id: ${post.id}`);\n        fetchComments(post.id);\n      });\n    }\n  }, [posts]);\n  useEffect(() => {\n    const fetchLikeStatus = async () => {\n      try {\n        const likeStatuses = {};\n        for (let post of posts) {\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_liked/`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const result = await response.json();\n            likeStatuses[post.id] = result.liked; // Assume the response contains { liked: true/false }\n            console.log('check liked');\n            console.log(result);\n          }\n        }\n        setLikedPosts(likeStatuses);\n      } catch (error) {\n        console.error('Error fetching like status:', error);\n      }\n    };\n    const fetchBookmarkStatus = async () => {\n      try {\n        const bookmarkPosts = {};\n        for (let post of posts) {\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_bookmarked/`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const result = await response.json();\n            bookmarkPosts[post.id] = result.bookmarked; // Assume the response contains { liked: true/false }\n          }\n        }\n        setbookmarkPosts(bookmarkPosts);\n      } catch (error) {\n        console.error('Error fetching like status:', error);\n      }\n    };\n    fetchLikeStatus();\n    fetchBookmarkStatus();\n  }, [posts, token, user]);\n  const handleLogout = () => {\n    dispatch(logout());\n    navigate('/login');\n  };\n  const handleFileChange = (event, type) => {\n    const fileInput = event.target;\n    const file = event.target.files[0];\n    if (file) {\n      const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n      if (!validImageTypes.includes(file.type)) {\n        // setError('Please select a valid image file (JPEG, JPG, or PNG).');\n        showErrorToast('Please select a valid image file (JPEG, JPG, or PNG).');\n        fileInput.value = null;\n        return;\n      }\n    }\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setModalImage(reader.result);\n        setImageType(type);\n        setModalIsOpen(true);\n        fileInput.value = null;\n      };\n      reader.readAsDataURL(file);\n    } else {\n      console.error('No file selected.');\n    }\n  };\n  const handleImageUpload = async () => {\n    if (!cropperRef.current) return;\n    const cropper = cropperRef.current.cropper;\n    const canvas = cropper.getCroppedCanvas();\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(imageType === 'cover' ? 'cover_pic' : 'profile_pic', blob, 'cropped-image.jpg');\n      try {\n        await axios.patch(`${BASE_URL}/api/users/profile/update/`, formData, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        const updatedImageURL = URL.createObjectURL(blob);\n        setProfile(prevProfile => ({\n          ...prevProfile,\n          [imageType === 'cover' ? 'cover_pic' : 'profile_pic']: updatedImageURL\n        }));\n\n        // Dispatch the action to update the Redux store\n        if (imageType === 'profile') {\n          dispatch(updateUserProfileImage(updatedImageURL));\n        }\n        closeModal();\n      } catch (err) {\n        setError('An error occurred while uploading the image.');\n      }\n    }, 'image/jpeg');\n  };\n  const openModal = type => {\n    setImageType(type);\n    document.getElementById(`${type}-upload`).click(); // Trigger the file input click\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setModalImage('');\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500 text-center mt-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 12\n    }, this);\n  }\n  if (!profile) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this);\n  }\n  const handleNewPost = async postData => {\n    const userId = user.id;\n    setLoading(true);\n    if (!postData.content || postData.content.trim() === '') {\n      showErrorToast(\"Content cannot be empty.\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append('content', postData.content);\n      formData.append('user', user.id);\n      if (postData.image) {\n        const imageBlob = await fetch(postData.image).then(res => res.blob());\n        formData.append('image', imageBlob, 'post.jpg');\n      }\n      console.log(`video:${postData.video}`);\n      if (postData.video) {\n        const videoBlob = await fetch(postData.video).then(res => res.blob());\n        const videoSizeMB = videoBlob.size / (1024 * 1024);\n        if (videoSizeMB > 100) {\n          showErrorToast(\"Video size exceeds 100MB. Please upload a smaller file.\");\n          setLoading(false);\n          return;\n        }\n        formData.append('video', videoBlob, 'post.mp4');\n      }\n      formData.append('is_approved', true);\n      for (const [key, value] of formData.entries()) {\n        console.log(`${key}:`, value);\n      }\n      const response = await axios.post(`${BASE_URL}/api/posts/`, formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setPosts(prevPosts => [response.data, ...prevPosts]);\n      showSuccessToast(\"Post successfully submitted\");\n    } catch (err) {\n      showErrorToast(\"Error while submitting!\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleLike = async postId => {\n    try {\n      const response = await fetch(`${BASE_URL}/api/likes/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          post: postId\n        })\n      });\n      if (response.status === 201) {\n        console.log('Post liked');\n        setLikedPosts(prev => ({\n          ...prev,\n          [postId]: true\n        }));\n      } else if (response.status === 204) {\n        console.log('Post unliked');\n        setLikedPosts(prev => ({\n          ...prev,\n          [postId]: false\n        }));\n      } else {\n        console.log('Error:', await response.json());\n      }\n      fetchPosts();\n    } catch (error) {\n      console.error('Error liking/unliking post:', error);\n    }\n  };\n  const handleSubmitComment = async (postId, commentText, parentId = null) => {\n    if (!commentText.trim()) {\n      showErrorToast('Empty Comment Box');\n      return;\n    }\n    console.log(postId, commentText, user.id, parentId, token);\n    try {\n      const response = await axios.post(`${BASE_URL}/api/comments/`, {\n        post: postId,\n        content: commentText,\n        user: user.id,\n        parent: parentId // Include parentId here\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const newCommentData = response.data;\n      setComments(prevComments => ({\n        ...prevComments,\n        [postId]: [...(prevComments[postId] || []), newCommentData]\n      }));\n      setNewComment(\"\");\n      setReplyingToCommentId(null);\n      showSuccessToast(\"Comment submitted successfully\");\n      fetchPosts();\n    } catch (error) {\n      showErrorToast(\"Error submitting comment\");\n    }\n  };\n  const handleToggleComments = postId => {\n    if (openCommentId === postId) {\n      setOpenCommentId(null); // Close the comments section if it's already open\n    } else {\n      setOpenCommentId(postId); // Open the comments section for the specific post\n    }\n  };\n  const handleAddEmoji = emoji => {\n    setCommentText(prev => prev + emoji.native); // Append the selected emoji to the comment text\n  };\n  const handleBookmark = async postId => {\n    try {\n      if (bookmarkPosts[postId]) {\n        // If already bookmarked, unbookmark the post\n        await axios.delete(`${BASE_URL}/api/bookmarks/${postId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setbookmarkPosts(prevState => ({\n          ...prevState,\n          [postId]: false\n        }));\n        showErrorToast('Post removed from Bookmarks');\n      } else {\n        // If not bookmarked, bookmark the post\n        await axios.post(`${BASE_URL}/api/bookmarks/`, {\n          post: postId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setbookmarkPosts(prevState => ({\n          ...prevState,\n          [postId]: true\n        }));\n        showSuccessToast('Added to Bookmarks');\n      }\n    } catch (error) {\n      console.error('Error updating bookmark:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto bg-white shadow-md rounded-md overflow-hidden mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(ProfileHeader, {\n      profile: profile,\n      handleFileChange: handleFileChange,\n      openModal: openModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 sm:p-6\",\n      children: [/*#__PURE__*/_jsxDEV(ProfileSection, {\n        user: user,\n        profile: profile,\n        followerCount: followerCount,\n        followingCount: followingCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 5\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PostBox, {\n        onPostSubmit: handleNewPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PostListComponent, {\n        posts: posts,\n        user: user,\n        likedPosts: likedPosts,\n        handleLike: handleLike,\n        handleToggleComments: handleToggleComments,\n        handleBookmark: handleBookmark,\n        bookmarkPosts: bookmarkPosts,\n        openCommentId: openCommentId,\n        handleSubmitComment: handleSubmitComment,\n        replyingToCommentId: replyingToCommentId,\n        setReplyingToCommentId: setReplyingToCommentId,\n        setCommentText: setCommentText,\n        setShowEmojiPicker: setShowEmojiPicker,\n        showEmojiPicker: showEmojiPicker,\n        handleAddEmoji: handleAddEmoji,\n        comments: comments,\n        commentText: commentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      className: \"w-full max-w-2xl mx-auto mt-16\",\n      children: /*#__PURE__*/_jsxDEV(ImageCropper, {\n        modalImage: modalImage,\n        onSave: handleImageUpload,\n        onClose: closeModal,\n        ref: cropperRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfilePage, \"eebtHU11oGZIEMAjsfvnvoC/DXo=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useNavigate];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useDispatch","useSelector","axios","BASE_URL","Modal","logout","updateUserProfileImage","showErrorToast","ImageCropper","PostBox","showSuccessToast","ProfileHeader","ProfileSection","PostListComponent","useNavigate","fetchProfile","fetchPosts","fetchBookmarks","updateLikeStatus","jsxDEV","_jsxDEV","setAppElement","ProfilePage","_s","profile","setProfile","error","setError","posts","setPosts","modalIsOpen","setModalIsOpen","modalImage","setModalImage","openCommentId","setOpenCommentId","imageType","setImageType","cropperRef","likedPosts","setLikedPosts","comments","setComments","newComment","setNewComment","replyingToCommentId","setReplyingToCommentId","user","state","token","auth","showEmojiPicker","setShowEmojiPicker","commentText","setCommentText","followerCount","setFollowerCount","followingCount","setFollowingCount","bookmarks","setBookmarks","bookmarkPosts","setbookmarkPosts","loading","setLoading","dispatch","navigate","fetchComments","postId","response","get","headers","Authorization","prevComments","data","console","log","length","forEach","post","id","fetchLikeStatus","likeStatuses","fetch","method","ok","result","json","liked","fetchBookmarkStatus","bookmarked","handleLogout","handleFileChange","event","type","fileInput","target","file","files","validImageTypes","includes","value","reader","FileReader","onloadend","readAsDataURL","handleImageUpload","current","cropper","canvas","getCroppedCanvas","toBlob","blob","formData","FormData","append","patch","updatedImageURL","URL","createObjectURL","prevProfile","closeModal","err","openModal","document","getElementById","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleNewPost","postData","userId","content","trim","image","imageBlob","then","res","video","videoBlob","videoSizeMB","size","key","entries","prevPosts","handleLike","body","JSON","stringify","status","prev","handleSubmitComment","parentId","parent","newCommentData","handleToggleComments","handleAddEmoji","emoji","native","handleBookmark","delete","prevState","onPostSubmit","isOpen","onRequestClose","onSave","onClose","ref","_c","$RefreshReg$"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/pages/ProfilePage.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../config';\r\nimport Modal from 'react-modal';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport { logout, updateUserProfileImage } from '../features/auth/userSlice';\r\nimport { showErrorToast } from '../components/ErroToast';\r\nimport ImageCropper from '../components/Cropper';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport PostBox from '../components/ProfilePageComponents/PostBoxComponent';\r\nimport { showSuccessToast } from '../components/CustomToast';\r\nimport ProfileHeader from '../components/ProfilePageComponents/ProfileHeader';\r\nimport ProfileSection from '../components/ProfilePageComponents/ProfileSection';\r\nimport PostListComponent from '../components/ProfilePageComponents/PostListComponent';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { fetchProfile, fetchPosts, fetchBookmarks, updateLikeStatus } from '../features/posts/profileSlice';\r\nModal.setAppElement('#root');\r\n\r\nconst ProfilePage = () => {\r\n  const [profile, setProfile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [posts, setPosts] = useState([]);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [modalImage, setModalImage] = useState('');\r\n  const [openCommentId, setOpenCommentId] = useState(null); \r\n  const [imageType, setImageType] = useState(''); // 'cover' or 'profile'\r\n  const cropperRef = useRef(null);\r\n  const [likedPosts, setLikedPosts] = useState({});   \r\n  const [comments, setComments] = useState({}); \r\n  const [newComment, setNewComment] = useState(\"\"); \r\n  const [replyingToCommentId, setReplyingToCommentId] = useState(null); \r\n  const user = useSelector((state) => state.user.user);\r\n  const token = useSelector((state) => state.auth.token);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  const [followerCount, setFollowerCount] = useState(0);\r\n  const [followingCount, setFollowingCount] = useState(0);\r\n  const [bookmarks, setBookmarks] = useState([]);\r\n  const [bookmarkPosts, setbookmarkPosts] = useState({});  \r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const dispatch = useDispatch()\r\n  const navigate=useNavigate();\r\n\r\n  // const fetchBookmarks = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(`${BASE_URL}/api/bookmarks`, {\r\n  //       headers: {\r\n  //           Authorization: `Bearer ${token}`,\r\n  //       },\r\n  //     });  // Fetch user's bookmarks\r\n  //     setBookmarks(response.data.map(bookmark => bookmark.post));\r\n  //   } catch (error) {\r\n  //     console.error('Error fetching bookmarks:', error);\r\n  //   }\r\n  // };\r\n  const fetchComments = async (postId) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments/`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setComments((prevComments) => ({\r\n        ...prevComments,\r\n        [postId]: response.data,\r\n        \r\n      }));\r\n    } catch (error) {\r\n      console.log(\"Error fetching comments\");\r\n    }\r\n  };\r\n\r\n  // const fetchPosts = async () => {\r\n  //   try {\r\n  //     const response = await axios.get(`${BASE_URL}/api/posts/?user_id=${user.id}`, {\r\n  //    headers: {\r\n  //        Authorization: `Bearer ${token}`,\r\n  //    },\r\n  //  });\r\n  //    setPosts(response.data); \r\n  //    console.log(response.data)// Set the fetched posts\r\n  //  } catch (err) {\r\n  //    console.log(\"Error fetching posts\");\r\n  //  }\r\n  // };\r\n  useEffect(() => {\r\n    // const fetchProfile = async () => {\r\n    //   try {\r\n    //     const response = await axios.get(`${BASE_URL}/api/users/profile/${user?.id}/`, {\r\n    //       headers: {\r\n    //         Authorization: `Bearer ${token}`,\r\n    //       },\r\n    //     });\r\n       \r\n    //     setProfile(response.data);\r\n    //     setFollowerCount(response.data.followers);\r\n    //     setFollowingCount(response.data.following);\r\n    //   } catch (err) {\r\n    //     console.log(`errorstatus:${err.response.status}`)\r\n    //     if (err.response?.status === 401) {\r\n    //       showErrorToast(\"Session timed out!.Please login agian.\")\r\n    //       setTimeout(() => {\r\n    //         handleLogout(); \r\n    //       }, 1000);\r\n    //     } else {\r\n          \r\n    //       setError(err.response?.data?.detail || 'An error occurred while fetching the profile.');\r\n    //     }\r\n    //   }\r\n    // };\r\n\r\n    if (user && token) {\r\n      fetchProfile();\r\n      fetchPosts();\r\n      fetchBookmarks();\r\n    }\r\n  }, [user, token]);\r\n\r\n  useEffect(() => {\r\n    if (posts.length > 0) {\r\n      posts.forEach((post) => {\r\n        console.log(`Correct post id: ${post.id}`);\r\n        fetchComments(post.id);\r\n      });\r\n    }\r\n  }, [posts]);\r\n\r\n  useEffect(() => {\r\n    const fetchLikeStatus = async () => {\r\n      try {\r\n        const likeStatuses = {};\r\n        for (let post of posts) {\r\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_liked/`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            likeStatuses[post.id] = result.liked; // Assume the response contains { liked: true/false }\r\n            console.log('check liked');\r\n            console.log(result);\r\n          }\r\n        }\r\n        setLikedPosts(likeStatuses);\r\n      } catch (error) {\r\n        console.error('Error fetching like status:', error);\r\n      }\r\n    };\r\n\r\n    const fetchBookmarkStatus = async () => {\r\n      try {\r\n        const bookmarkPosts = {};\r\n        for (let post of posts) {\r\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_bookmarked/`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            bookmarkPosts[post.id] = result.bookmarked; // Assume the response contains { liked: true/false }\r\n           \r\n          }\r\n        }\r\n        setbookmarkPosts(bookmarkPosts);\r\n      } catch (error) {\r\n        console.error('Error fetching like status:', error);\r\n      }\r\n    };\r\n\r\n    fetchLikeStatus();\r\n    fetchBookmarkStatus();\r\n  }, [posts, token,user]);\r\n\r\n  const handleLogout=()=>{\r\n    dispatch(logout());\r\n    navigate('/login')\r\n  }\r\n\r\n\r\n  const handleFileChange = (event, type) => {\r\n    const fileInput = event.target;\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n      if (!validImageTypes.includes(file.type)) {\r\n        // setError('Please select a valid image file (JPEG, JPG, or PNG).');\r\n        showErrorToast('Please select a valid image file (JPEG, JPG, or PNG).');\r\n        fileInput.value = null; \r\n        return;\r\n      }\r\n    }\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setModalImage(reader.result);\r\n        setImageType(type);\r\n        setModalIsOpen(true);\r\n        fileInput.value = null; \r\n      };\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      console.error('No file selected.');\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async () => {\r\n    if (!cropperRef.current) return;\r\n\r\n    const cropper = cropperRef.current.cropper;\r\n    const canvas = cropper.getCroppedCanvas();\r\n    canvas.toBlob(async (blob) => {\r\n      const formData = new FormData();\r\n      formData.append(imageType === 'cover' ? 'cover_pic' : 'profile_pic', blob, 'cropped-image.jpg');\r\n\r\n      try {\r\n        await axios.patch(`${BASE_URL}/api/users/profile/update/`, formData, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            'Content-Type': 'multipart/form-data',\r\n          },\r\n        });\r\n\r\n        const updatedImageURL = URL.createObjectURL(blob);\r\n        setProfile((prevProfile) => ({\r\n          ...prevProfile,\r\n          [imageType === 'cover' ? 'cover_pic' : 'profile_pic']: updatedImageURL,\r\n        }));\r\n\r\n        // Dispatch the action to update the Redux store\r\n        if (imageType === 'profile') {\r\n          dispatch(updateUserProfileImage(updatedImageURL));\r\n        }\r\n\r\n        closeModal();\r\n\r\n      } catch (err) {\r\n        setError('An error occurred while uploading the image.');\r\n      }\r\n    }, 'image/jpeg');\r\n  };\r\n\r\n\r\n  const openModal = (type) => {\r\n    setImageType(type);\r\n    document.getElementById(`${type}-upload`).click(); // Trigger the file input click\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalIsOpen(false);\r\n    setModalImage('');\r\n  };\r\n\r\n  if (error) {\r\n    return <div className=\"text-red-500 text-center mt-4\">{error}</div>;\r\n  }\r\n\r\n  if (!profile) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"></div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  const handleNewPost = async (postData) => {\r\n    const userId = user.id;\r\n    setLoading(true);  \r\n    if (!postData.content || postData.content.trim() === '') {\r\n      showErrorToast(\"Content cannot be empty.\");\r\n      setLoading(false); \r\n      return;\r\n    }\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('content', postData.content);\r\n      formData.append('user', user.id);\r\n\r\n      if (postData.image) {\r\n        const imageBlob = await fetch(postData.image).then((res) => res.blob());\r\n        formData.append('image', imageBlob, 'post.jpg');\r\n      }\r\n  \r\n      console.log(`video:${postData.video}`)\r\n      if (postData.video) {\r\n        const videoBlob = await fetch(postData.video).then((res) => res.blob());\r\n        const videoSizeMB = videoBlob.size / (1024 * 1024);\r\n        if (videoSizeMB > 100) {\r\n          showErrorToast(\"Video size exceeds 100MB. Please upload a smaller file.\");\r\n          setLoading(false); \r\n          return; \r\n        }\r\n        formData.append('video', videoBlob, 'post.mp4');\r\n      }\r\n      formData.append('is_approved', true);\r\n      for (const [key, value] of formData.entries()) {\r\n        console.log(`${key}:`, value);\r\n      }\r\n      const response = await axios.post(`${BASE_URL}/api/posts/`, formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      \r\n      setPosts((prevPosts) => [response.data, ...prevPosts]);\r\n      showSuccessToast(\"Post successfully submitted\");\r\n    } catch (err) {\r\n       showErrorToast(\"Error while submitting!\")\r\n    }finally {\r\n      setLoading(false);  \r\n    }\r\n  };\r\n  const handleLike = async  (postId) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/api/likes/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ post: postId }),\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        console.log('Post liked');\r\n        setLikedPosts((prev) => ({ ...prev, [postId]: true }));\r\n      } else if (response.status === 204) {\r\n        console.log('Post unliked');\r\n        setLikedPosts((prev) => ({ ...prev, [postId]: false }));\r\n      } else {\r\n        console.log('Error:', await response.json());\r\n      }\r\n      fetchPosts();\r\n    } catch (error) {\r\n      console.error('Error liking/unliking post:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleSubmitComment = async (postId, commentText, parentId = null) => {\r\n    if (!commentText.trim()) {\r\n      showErrorToast('Empty Comment Box');\r\n      return;\r\n    }\r\n    console.log(postId,commentText,user.id,parentId,token);\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/api/comments/`, {\r\n        post: postId,\r\n        content: commentText,\r\n        user: user.id,\r\n        parent: parentId, // Include parentId here\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n  \r\n      const newCommentData = response.data;\r\n      setComments((prevComments) => ({\r\n        ...prevComments,\r\n        [postId]: [...(prevComments[postId] || []), newCommentData],\r\n      }));\r\n  \r\n      setNewComment(\"\");\r\n      setReplyingToCommentId(null);\r\n     \r\n      showSuccessToast(\"Comment submitted successfully\");\r\n      fetchPosts();\r\n    } catch (error) {\r\n      showErrorToast(\"Error submitting comment\");\r\n    }\r\n  };\r\n  const handleToggleComments = (postId) => {\r\n    if (openCommentId === postId) {\r\n      setOpenCommentId(null); // Close the comments section if it's already open\r\n    } else {\r\n      setOpenCommentId(postId); // Open the comments section for the specific post\r\n    }\r\n  };\r\n\r\n  const handleAddEmoji = (emoji) => {\r\n    setCommentText((prev) => prev + emoji.native); // Append the selected emoji to the comment text\r\n  };\r\n \r\n\r\n  const handleBookmark = async (postId) => {\r\n    try {\r\n      \r\n      if (bookmarkPosts[postId]) {\r\n        // If already bookmarked, unbookmark the post\r\n        await axios.delete(`${BASE_URL}/api/bookmarks/${postId}`,{\r\n          headers: {\r\n              Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setbookmarkPosts((prevState) => ({\r\n          ...prevState,\r\n          [postId]: false,\r\n        }));\r\n        showErrorToast('Post removed from Bookmarks');\r\n      } else {\r\n        // If not bookmarked, bookmark the post\r\n        await axios.post(`${BASE_URL}/api/bookmarks/`, { post: postId }, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setbookmarkPosts((prevState) => ({\r\n          ...prevState,\r\n          [postId]: true,\r\n        }));\r\n        showSuccessToast('Added to Bookmarks');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating bookmark:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto bg-white shadow-md rounded-md overflow-hidden mt-8\">\r\n      \r\n    {/* Profile Header */}\r\n  \r\n    <ProfileHeader profile={profile} handleFileChange={handleFileChange} openModal={openModal}/>\r\n    {/* Profile Details */}\r\n  <div className=\"p-4 sm:p-6\">\r\n    {/* Profile Section */}\r\n    <ProfileSection user={user} profile={profile} followerCount={followerCount} followingCount={followingCount}/>\r\n{loading && (\r\n      <div className=\"flex justify-center items-center mb-2\">\r\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"></div>\r\n      </div>\r\n    )}\r\n    {/* PostBox Section */}\r\n    <PostBox onPostSubmit={handleNewPost} />\r\n\r\n  \r\n   \r\n      <PostListComponent \r\n      posts={posts}\r\n      user={user}\r\n      likedPosts={likedPosts}\r\n      handleLike={handleLike}\r\n      handleToggleComments={handleToggleComments}\r\n      handleBookmark={handleBookmark}\r\n      bookmarkPosts={bookmarkPosts}\r\n      openCommentId={openCommentId}\r\n      handleSubmitComment={handleSubmitComment}\r\n      replyingToCommentId={replyingToCommentId}\r\n      setReplyingToCommentId={setReplyingToCommentId}\r\n      setCommentText={setCommentText}\r\n      setShowEmojiPicker={setShowEmojiPicker}\r\n      showEmojiPicker={showEmojiPicker}\r\n      handleAddEmoji={handleAddEmoji}\r\n      comments={comments}\r\n      commentText={commentText}\r\n      />\r\n   \r\n  </div>\r\n\r\n  {/* Cropper Modal */}\r\n  <Modal isOpen={modalIsOpen} onRequestClose={closeModal} className=\"w-full max-w-2xl mx-auto mt-16\">\r\n    <ImageCropper modalImage={modalImage} onSave={handleImageUpload} onClose={closeModal} ref={cropperRef} />\r\n  </Modal>\r\n</div>\r\n\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}