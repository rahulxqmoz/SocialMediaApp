{"ast":null,"code":"var _jsxFileName = \"H:\\\\SecondProject-DjangoReact\\\\frontend\\\\socialmedia-app\\\\src\\\\pages\\\\VideoCallPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useRef, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\n// import { FaVideo, FaPhoneSlash } from \"react-icons/fa\";\n\n// const VideoCall = () => {\n//     const { userId } = useParams();\n//     const currentUser  = useSelector((state) => state.user.user);\n//     const localVideoRef = useRef(null);\n//     const remoteVideoRef = useRef(null);\n//     const peerConnection = useRef(null);\n//     const ws = useRef(null);\n//     const [isCallActive, setIsCallActive] = useState(false);\n//     const [isCallReceived, setIsCallReceived] = useState(false);\n//     const [isCaller, setIsCaller] = useState(true);\n//     const token = useSelector((state) => state.auth.token);\n\n//     useEffect(() => {\n//         const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n//         ws.current = new WebSocket(`${wsProtocol}://localhost:8000/chat/${userId}/?token=${token}`);\n\n//         ws.current.onopen = () => {\n//             console.log(\"WebSocket connection established.\");\n//         };\n\n//         ws.current.onmessage = (message) => {\n//             const data = JSON.parse(message.data);\n//             console.log(\"Message received from WebSocket:\", data);\n\n//             switch (data.action) {\n//                 case 'video_call_offer':\n//                     setIsCallReceived(true);\n//                     setIsCaller(false);\n//                     handleOffer(data.offer);\n//                     break;\n//                 case 'video_call_answer':\n//                     handleVideoCallAnswered(data.answer);\n//                     break;\n//                 case 'ice_candidate':\n//                     handleICECandidate(data.candidate);\n//                     break;\n//                 case 'call_accepted':\n//                     setIsCallActive(true);\n//                     setIsCallReceived(false);\n//                     break;\n//                 case 'call_rejected':\n//                     setIsCallReceived(false);\n//                     break;\n//                 case 'end_call':\n//                     endCall();\n//                     break;\n//                 default:\n//                     console.warn(`Unhandled action type: ${data.action}`);\n//                     break;\n//             }\n//         };\n\n//         return () => {\n//             if (ws.current) {\n//                 ws.current.close();\n//                 console.log(\"WebSocket connection closed.\");\n//             }\n//         };\n//     }, [userId]);\n\n//     const startLocalVideo = async () => {\n//         try {\n//             const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n//             if (localVideoRef.current) {\n//                 localVideoRef.current.srcObject = stream;\n//                 stream.getTracks().forEach(track => {\n//                     if (peerConnection.current) {\n//                         peerConnection.current.addTrack(track, stream);\n//                     }\n//                 });\n//             }\n//         } catch (error) {\n//             console.error(\"Error accessing local media: \", error);\n//         }\n//     };\n\n//     const createPeerConnection = () => {\n//         peerConnection.current = new RTCPeerConnection({\n//             iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n//         });\n\n//         peerConnection.current.onicecandidate = (event) => {\n//             if (event.candidate) {\n//                 ws.current.send(JSON.stringify({\n//                     action: 'ice_candidate',\n//                     candidate: event.candidate,\n//                     recipient_id: userId\n//                 }));\n//             }\n//         };\n\n//         peerConnection.current.ontrack = (event) => {\n//             if (remoteVideoRef.current) {\n//                 remoteVideoRef.current.srcObject = event.streams[0];\n//             }\n//         };\n//     };\n\n//     const handleOffer = async (offer) => {\n//         if (!peerConnection.current) createPeerConnection();\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\n//     };\n\n//     const acceptCall = async () => {\n//         if (!peerConnection.current || isCaller) return;\n\n//         await startLocalVideo();\n//         const answer = await peerConnection.current.createAnswer();\n//         await peerConnection.current.setLocalDescription(answer);\n\n//         ws.current.send(JSON.stringify({\n//             action: 'video_call_answer',\n//             answer: peerConnection.current.localDescription,\n//             recipient_id: userId\n//         }));\n\n//         setIsCallActive(true);\n//         setIsCallReceived(false);\n//     };\n\n//     const handleVideoCallAnswered = async (answer) => {\n//         if (!peerConnection.current) {\n//             createPeerConnection();\n//         }\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\n//         setIsCallActive(true);\n//     };\n\n//     const handleICECandidate = async (candidate) => {\n//         if (candidate) {\n//             await peerConnection.current.addIceCandidate(new RTCIceCandidate (candidate));\n//         }\n//     };\n\n//     const startCall = async () => {\n//         if (!peerConnection.current) createPeerConnection();\n//         await startLocalVideo();\n//         const offer = await peerConnection.current.createOffer();\n//         await peerConnection.current.setLocalDescription(offer);\n//         ws.current.send(JSON.stringify({\n//             action: 'video_call_offer',\n//             offer: offer,\n//             recipient_id: userId\n//         }));\n//         setIsCallActive(true);\n//     };\n\n//     const endCall = () => {\n//         if (ws.current) {\n//             ws.current.send(JSON.stringify({\n//                 action: 'end_call',\n//                 sender_id: currentUser.id,\n//                 recipient_id: userId\n//             }));\n//         }\n\n//         if (peerConnection.current) {\n//             peerConnection.current.close();\n//             peerConnection.current = null;\n//         }\n\n//         if (localVideoRef.current && localVideoRef.current.srcObject) {\n//             const stream = localVideoRef.current.srcObject;\n//             const tracks = stream.getTracks();\n//             tracks.forEach(track => track.stop());\n//             localVideoRef.current.srcObject = null;\n//         }\n\n//         if (remoteVideoRef.current) {\n//             remoteVideoRef.current.srcObject = null;\n//         }\n\n//         setIsCallActive(false);\n//         setIsCallReceived(false);\n//     };\n\n//     return (\n//         <div className=\"flex h-screen\">\n//         <div className=\"flex-1 flex flex-col items-center justify-center\">\n//             <div className=\"bg-white shadow-md rounded-md p-4 w-96 h-96\">\n//                 <video ref={localVideoRef} autoPlay muted className=\"w-full h-full object-cover\" />\n//             </div>\n//             <div className=\"mt-4 flex space-x-4\">\n//                 {isCallActive && (\n//                     <button onClick={endCall} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition duration-200\">\n//                         <FaPhoneSlash className=\"w-6 h-6\" />\n//                     </button>\n//                 )}\n//                 {!isCallActive && isCallReceived && !isCaller && (\n//                     <div className=\"fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center z-50\">\n//                         <div className=\"bg-white rounded-lg shadow-lg p-6 w-80 text-center\">\n//                             <p className=\"text-lg font-semibold mb-4\">Incoming call from {currentUser.username}...</p>\n//                             <div className=\"flex justify-center space-x-4\">\n//                                 <button onClick={acceptCall} className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-200\">\n//                                     Accept\n//                                 </button>\n//                                 <button onClick={endCall} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition duration-200\">\n//                                     Decline\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     </div>\n//                 )}\n//                 {!isCallActive && !isCallReceived && isCaller && (\n//                     <button onClick={startCall} className=\"bg-blue-400 text-white px-4 py-2 rounded hover:bg-blue-500 transition duration-200\">\n//                         Start Call\n//                     </button>\n//                 )}\n//             </div>\n//         </div>\n//         <div className=\"flex-1 flex flex-col items-center justify-center\">\n//             <div className=\"bg-white shadow-md rounded-md p-4 w-96 h-96\">\n//                 <video ref={remoteVideoRef} autoPlay className=\"w-full h-full object-cover\" />\n//             </div>\n//         </div>\n//     </div>\n//     );\n// };\n\n// export default VideoCall;\n\n// import React, { useEffect, useRef, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { useSelector } from 'react-redux';\n// import { FaVideo, FaPhoneSlash } from \"react-icons/fa\";\n\n// const VideoCall = () => {\n//     const { userId } = useParams();\n\n//     const currentUser  = useSelector((state) => state.user.user);\n//     const localVideoRef = useRef(null);\n//     const remoteVideoRef = useRef(null);\n//     const peerConnection = useRef(null);\n//     const ws = useRef(null);\n//     const [isCallActive, setIsCallActive] = useState(false);\n//     const [isCallReceived, setIsCallReceived] = useState(false);\n//     const [isCaller, setIsCaller] = useState(true);\n//     const token = useSelector((state) => state.auth.token);\n\n//     const [isWsConnected, setIsWsConnected] = useState(false);\n\n//     useEffect(() => {\n//         const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n//         ws.current = new WebSocket(`${wsProtocol}://localhost:8000/ws/video-call/${currentUser.id}/${userId}/?token=${token}`);\n\n//         ws.current.onopen = () => {\n//             console.log(\"WebSocket connection established.\");\n//             setIsWsConnected(true); \n//         };\n\n//         ws.current.onmessage = (message) => {\n//             const data = JSON.parse(message.data);\n//             console.log(\"Message received from WebSocket:\", data);\n\n//             switch (data.action) {\n//                 case 'video_call_offer':\n//                     setIsCallReceived(true);\n//                     setIsCaller(false);\n//                     handleOffer(data.offer);\n//                     break;\n//                 case 'video_call_answer':\n//                     handleVideoCallAnswered(data.answer);\n//                     break;\n//                 case 'ice_candidate':\n//                     handleICECandidate(data.candidate);\n//                     break;\n//                 case 'call_accepted':\n//                     setIsCallActive(true);\n//                     setIsCallReceived(false);\n//                     break;\n//                 case 'call_rejected':\n//                     setIsCallReceived(false);\n//                     break;\n//                 case 'end_call':\n//                     if (isCallActive) {\n//                         endCall();\n//                     }\n//                     break;\n//                 default:\n//                     console.warn(`Unhandled action type: ${data.action}`);\n//                     break;\n//             }\n//         };\n\n//         return () => {\n//             if (ws.current) {\n//                 ws.current.close();\n//                 console.log(\"WebSocket connection closed.\");\n//                 setIsWsConnected(false);\n//             }\n//         };\n//     }, [userId,isCallActive]);\n\n//     const startLocalVideo = async () => {\n//         try {\n//             const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\n//             if (localVideoRef.current) {\n//                 localVideoRef.current.srcObject = stream;\n//                 stream.getTracks().forEach(track => {\n//                     if (peerConnection.current) {\n//                         peerConnection.current.addTrack(track, stream);\n//                     }\n//                 });\n//             }\n//         } catch (error) {\n//             console.error(\"Error accessing local media: \", error);\n//         }\n//     };\n\n//     const createPeerConnection = () => {\n//         peerConnection.current = new RTCPeerConnection({\n//             iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n//         });\n\n//         peerConnection.current.onicecandidate = (event) => {\n//             if (event.candidate && isWsConnected) {\n//                 // Check if the WebSocket is open before sending\n//                 if (ws.current.readyState === WebSocket.OPEN) {\n//                     console.log('ice_candidate entered')\n//                     ws.current.send(JSON.stringify({\n//                         action: 'ice_candidate',\n//                         candidate: event.candidate,\n//                         recipient_id: userId\n//                     }));\n//                 } else {\n//                     console.warn(\"WebSocket is not open. Cannot send ICE candidate.\");\n//                 }\n//             }\n//         };\n\n//         peerConnection.current.ontrack = (event) => {\n//             console.log(\"Track event received:\", event);\n//             if (remoteVideoRef.current) {\n//                 remoteVideoRef.current.srcObject = event.streams[0];\n//                 console.log(\"Remote video stream set:\", event.streams[0]);\n//             }\n//         };\n//     };\n\n//     const handleOffer = async (offer) => {\n//         if (!peerConnection.current) createPeerConnection();\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\n//     };\n\n//     const acceptCall = async () => {\n//         if (!peerConnection.current || isCaller) return;\n\n//         await startLocalVideo();\n//         const answer = await peerConnection.current.createAnswer();\n//         await peerConnection.current.setLocalDescription(answer);\n\n//         ws.current.send(JSON.stringify({\n//             action: 'video_call_answer',\n//             answer: peerConnection.current.localDescription,\n//             recipient_id: userId\n//         }));\n\n//         setIsCallActive(true);\n//         setIsCallReceived(false);\n//     };\n\n//     const handleVideoCallAnswered = async (answer) => {\n//         if (!peerConnection.current) {\n//             createPeerConnection();\n//         }\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\n//         setIsCallActive(true);\n//     };\n\n//     const handleICECandidate = async (candidate) => {\n//         if (candidate) {\n//             await peerConnection.current.addIceCandidate(new RTCIceCandidate (candidate));\n//         }\n//     };\n\n//     const startCall = async () => {\n//         if (!peerConnection.current) createPeerConnection();\n//         await startLocalVideo();\n//         const offer = await peerConnection.current.createOffer();\n//         await peerConnection.current.setLocalDescription(offer);\n//         ws.current.send(JSON.stringify({\n//             action: 'video_call_offer',\n//             offer: offer,\n//             recipient_id: userId\n//         }));\n//         setIsCallActive(true);\n//     };\n\n//     const endCall = () => {\n//         if (ws.current) {\n//             ws.current.send(JSON.stringify({\n//                 action: 'end_call',\n//                 sender_id: currentUser.id,\n//                 recipient_id: userId\n//             }));\n//         }\n\n//         if (peerConnection.current) {\n//             peerConnection.current.close();\n//             peerConnection.current = null;\n//         }\n\n//         if (localVideoRef.current && localVideoRef.current.srcObject) {\n//             const stream = localVideoRef.current.srcObject;\n//             const tracks = stream.getTracks();\n//             tracks.forEach(track => track.stop());\n//             localVideoRef.current.srcObject = null;\n//         }\n\n//         if (remoteVideoRef.current) {\n//             remoteVideoRef.current.srcObject = null;\n//         }\n\n//         setIsCallActive(false);\n//         setIsCallReceived(false);\n//     };\n\n//     return (\n//         <div className=\"flex flex-col md:flex-row h-4/5 w-full\">\n//   {/* Local Video Section */}\n//   <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\n//     <div className=\"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\">\n//       <video ref={localVideoRef} autoPlay muted className=\"w-full h-full object-cover\" />\n//     </div>\n//     <div className=\"mt-2 flex space-x-4\">\n//       {isCallActive && (\n//         <button\n//           onClick={endCall}\n//           className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\"\n//         >\n//           <FaPhoneSlash className=\"w-6 h-6\" />\n//         </button>\n//       )}\n//       {!isCallActive && isCallReceived && !isCaller && (\n//         <div className=\"fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center z-50\">\n//           <div className=\"bg-white rounded-lg shadow-lg p-6 w-80 text-center\">\n//             <p className=\"text-lg font-semibold mb-4\">Incoming call from {userId}...</p>\n//             <div className=\"flex justify-center space-x-4\">\n//               <button\n//                 onClick={acceptCall}\n//                 className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-200\"\n//               >\n//                 Accept\n//               </button>\n//               <button\n//                 onClick={endCall}\n//                 className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\"\n//               >\n//                 Decline\n//               </button>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//       {!isCallActive && !isCallReceived && isCaller && (\n//         <button\n//           onClick={startCall}\n//           className=\"bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition duration-200\"\n//         >\n//           Start Call\n//         </button>\n//       )}\n//     </div>\n//   </div>\n\n//   {/* Remote Video Section */}\n//   <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\n//     <div className=\"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\">\n//       <video ref={remoteVideoRef} autoPlay className=\"w-full h-full object-cover\" />\n//     </div>\n//   </div>\n// </div>\n//     );\n// };\n\n// export default VideoCall;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { FaVideo, FaPhoneSlash } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoCall = () => {\n  _s();\n  const {\n    userId\n  } = useParams(); // recipient's ID\n  const currentUser = useSelector(state => state.user.user); // current logged-in user (sender)\n  const localVideoRef = useRef(null);\n  const remoteVideoRef = useRef(null);\n  const peerConnection = useRef(null);\n  const ws = useRef(null);\n  const [isCallActive, setIsCallActive] = useState(false);\n  const [isCallReceived, setIsCallReceived] = useState(false);\n  const [isCaller, setIsCaller] = useState(true);\n  const token = useSelector(state => state.auth.token);\n  const [isWsConnected, setIsWsConnected] = useState(false);\n  useEffect(() => {\n    const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    ws.current = new WebSocket(`${wsProtocol}://localhost:8000/ws/video-call/${currentUser.id}/${userId}/?token=${token}`);\n    ws.current.onopen = () => {\n      console.log(\"WebSocket connection established.\");\n      setIsWsConnected(true);\n    };\n    ws.current.onmessage = message => {\n      const data = JSON.parse(message.data);\n      console.log(\"Message received from WebSocket:\", data);\n      switch (data.action) {\n        case 'video_call_offer':\n          setIsCallReceived(true);\n          setIsCaller(false);\n          handleOffer(data.offer);\n          break;\n        case 'video_call_answer':\n          handleVideoCallAnswered(data.answer);\n          break;\n        case 'ice_candidate':\n          handleICECandidate(data.candidate);\n          break;\n        case 'call_accepted':\n          setIsCallActive(true);\n          setIsCallReceived(false);\n          break;\n        case 'call_rejected':\n          setIsCallReceived(false);\n          break;\n        case 'end_call':\n          if (isCallActive) {\n            endCall();\n          }\n          break;\n        default:\n          console.warn(`Unhandled action type: ${data.action}`);\n          break;\n      }\n    };\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n        console.log(\"WebSocket connection closed.\");\n        setIsWsConnected(false);\n      }\n    };\n  }, [userId, isCallActive]);\n  const startLocalVideo = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n        stream.getTracks().forEach(track => {\n          if (peerConnection.current) {\n            peerConnection.current.addTrack(track, stream);\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Error accessing local media: \", error);\n    }\n  };\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n  const createPeerConnection = () => {\n    peerConnection.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }]\n    });\n    peerConnection.current.onicecandidate = async event => {\n      if (event.candidate) {\n        // Wait for WebSocket to be open\n        while (ws.current.readyState !== WebSocket.OPEN) {\n          await delay(100); // Check every 100ms\n        }\n        ws.current.send(JSON.stringify({\n          action: 'ice_candidate',\n          candidate: event.candidate,\n          recipient_id: userId\n        }));\n      }\n    };\n    peerConnection.current.ontrack = event => {\n      if (remoteVideoRef.current) {\n        remoteVideoRef.current.srcObject = event.streams[0];\n      }\n    };\n  };\n  const handleOffer = async offer => {\n    if (!peerConnection.current) createPeerConnection();\n    await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\n  };\n  const acceptCall = async () => {\n    if (!peerConnection.current || isCaller) return;\n    await startLocalVideo();\n    const answer = await peerConnection.current.createAnswer();\n    await peerConnection.current.setLocalDescription(answer);\n    ws.current.send(JSON.stringify({\n      action: 'video_call_answer',\n      answer: peerConnection.current.localDescription,\n      recipient_id: userId\n    }));\n    setIsCallActive(true);\n    setIsCallReceived(false);\n  };\n  const handleVideoCallAnswered = async answer => {\n    if (!peerConnection.current) {\n      createPeerConnection();\n    }\n    await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\n    setIsCallActive(true);\n  };\n  const handleICECandidate = async candidate => {\n    if (candidate) {\n      await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));\n    }\n  };\n  const startCall = async () => {\n    if (!peerConnection.current) createPeerConnection();\n    await startLocalVideo();\n    const offer = await peerConnection.current.createOffer();\n    await peerConnection.current.setLocalDescription(offer);\n    ws.current.send(JSON.stringify({\n      action: 'video_call_offer',\n      offer: offer,\n      recipient_id: userId\n    }));\n    setIsCallActive(true);\n  };\n  const endCall = () => {\n    if (ws.current) {\n      ws.current.send(JSON.stringify({\n        action: 'end_call',\n        sender_id: currentUser.id,\n        recipient_id: userId\n      }));\n    }\n    if (peerConnection.current) {\n      peerConnection.current.close();\n      peerConnection.current = null;\n    }\n    if (localVideoRef.current && localVideoRef.current.srcObject) {\n      const stream = localVideoRef.current.srcObject;\n      stream.getTracks().forEach(track => track.stop());\n      localVideoRef.current.srcObject = null;\n    }\n    if (remoteVideoRef.current) {\n      remoteVideoRef.current.srcObject = null;\n    }\n    setIsCallActive(false);\n    setIsCallReceived(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col md:flex-row h-4/5 w-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col items-center justify-center p-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: localVideoRef,\n          autoPlay: true,\n          muted: true,\n          className: \"w-full h-full object-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 flex space-x-4\",\n        children: [isCallActive && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: endCall,\n          className: \"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\",\n          children: /*#__PURE__*/_jsxDEV(FaPhoneSlash, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 25\n        }, this), !isCallActive && isCallReceived && !isCaller && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center z-50\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white rounded-lg shadow-lg p-6 w-80 text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-lg font-semibold mb-4\",\n              children: [\"Incoming call from \", userId, \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-center space-x-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: acceptCall,\n                className: \"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-200\",\n                children: \"Accept\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 697,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: endCall,\n                className: \"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\",\n                children: \"Decline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 703,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 696,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 25\n        }, this), !isCallActive && !isCallReceived && isCaller && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startCall,\n          className: \"bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition duration-200\",\n          children: \"Start Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 714,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 flex flex-col items-center justify-center p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: remoteVideoRef,\n          autoPlay: true,\n          className: \"w-full h-full object-cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 677,\n    columnNumber: 9\n  }, this);\n};\n_s(VideoCall, \"FQZjMqNcSl7YviYBJIDkHxlpjEs=\", false, function () {\n  return [useParams, useSelector, useSelector];\n});\n_c = VideoCall;\nexport default VideoCall;\nvar _c;\n$RefreshReg$(_c, \"VideoCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","useSelector","FaVideo","FaPhoneSlash","jsxDEV","_jsxDEV","VideoCall","_s","userId","currentUser","state","user","localVideoRef","remoteVideoRef","peerConnection","ws","isCallActive","setIsCallActive","isCallReceived","setIsCallReceived","isCaller","setIsCaller","token","auth","isWsConnected","setIsWsConnected","wsProtocol","window","location","protocol","current","WebSocket","id","onopen","console","log","onmessage","message","data","JSON","parse","action","handleOffer","offer","handleVideoCallAnswered","answer","handleICECandidate","candidate","endCall","warn","close","startLocalVideo","stream","navigator","mediaDevices","getUserMedia","video","audio","srcObject","getTracks","forEach","track","addTrack","error","delay","ms","Promise","resolve","setTimeout","createPeerConnection","RTCPeerConnection","iceServers","urls","onicecandidate","event","readyState","OPEN","send","stringify","recipient_id","ontrack","streams","setRemoteDescription","RTCSessionDescription","acceptCall","createAnswer","setLocalDescription","localDescription","addIceCandidate","RTCIceCandidate","startCall","createOffer","sender_id","stop","className","children","ref","autoPlay","muted","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/pages/VideoCallPage.js"],"sourcesContent":["// import React, { useEffect, useRef, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { useSelector } from 'react-redux';\r\n// import { FaVideo, FaPhoneSlash } from \"react-icons/fa\";\r\n\r\n// const VideoCall = () => {\r\n//     const { userId } = useParams();\r\n//     const currentUser  = useSelector((state) => state.user.user);\r\n//     const localVideoRef = useRef(null);\r\n//     const remoteVideoRef = useRef(null);\r\n//     const peerConnection = useRef(null);\r\n//     const ws = useRef(null);\r\n//     const [isCallActive, setIsCallActive] = useState(false);\r\n//     const [isCallReceived, setIsCallReceived] = useState(false);\r\n//     const [isCaller, setIsCaller] = useState(true);\r\n//     const token = useSelector((state) => state.auth.token);\r\n    \r\n    \r\n\r\n//     useEffect(() => {\r\n//         const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n//         ws.current = new WebSocket(`${wsProtocol}://localhost:8000/chat/${userId}/?token=${token}`);\r\n\r\n//         ws.current.onopen = () => {\r\n//             console.log(\"WebSocket connection established.\");\r\n//         };\r\n\r\n//         ws.current.onmessage = (message) => {\r\n//             const data = JSON.parse(message.data);\r\n//             console.log(\"Message received from WebSocket:\", data);\r\n\r\n//             switch (data.action) {\r\n//                 case 'video_call_offer':\r\n//                     setIsCallReceived(true);\r\n//                     setIsCaller(false);\r\n//                     handleOffer(data.offer);\r\n//                     break;\r\n//                 case 'video_call_answer':\r\n//                     handleVideoCallAnswered(data.answer);\r\n//                     break;\r\n//                 case 'ice_candidate':\r\n//                     handleICECandidate(data.candidate);\r\n//                     break;\r\n//                 case 'call_accepted':\r\n//                     setIsCallActive(true);\r\n//                     setIsCallReceived(false);\r\n//                     break;\r\n//                 case 'call_rejected':\r\n//                     setIsCallReceived(false);\r\n//                     break;\r\n//                 case 'end_call':\r\n//                     endCall();\r\n//                     break;\r\n//                 default:\r\n//                     console.warn(`Unhandled action type: ${data.action}`);\r\n//                     break;\r\n//             }\r\n//         };\r\n\r\n//         return () => {\r\n//             if (ws.current) {\r\n//                 ws.current.close();\r\n//                 console.log(\"WebSocket connection closed.\");\r\n//             }\r\n//         };\r\n//     }, [userId]);\r\n\r\n//     const startLocalVideo = async () => {\r\n//         try {\r\n//             const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n//             if (localVideoRef.current) {\r\n//                 localVideoRef.current.srcObject = stream;\r\n//                 stream.getTracks().forEach(track => {\r\n//                     if (peerConnection.current) {\r\n//                         peerConnection.current.addTrack(track, stream);\r\n//                     }\r\n//                 });\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error accessing local media: \", error);\r\n//         }\r\n//     };\r\n\r\n//     const createPeerConnection = () => {\r\n//         peerConnection.current = new RTCPeerConnection({\r\n//             iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\r\n//         });\r\n\r\n//         peerConnection.current.onicecandidate = (event) => {\r\n//             if (event.candidate) {\r\n//                 ws.current.send(JSON.stringify({\r\n//                     action: 'ice_candidate',\r\n//                     candidate: event.candidate,\r\n//                     recipient_id: userId\r\n//                 }));\r\n//             }\r\n//         };\r\n\r\n//         peerConnection.current.ontrack = (event) => {\r\n//             if (remoteVideoRef.current) {\r\n//                 remoteVideoRef.current.srcObject = event.streams[0];\r\n//             }\r\n//         };\r\n//     };\r\n\r\n//     const handleOffer = async (offer) => {\r\n//         if (!peerConnection.current) createPeerConnection();\r\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\r\n//     };\r\n\r\n//     const acceptCall = async () => {\r\n//         if (!peerConnection.current || isCaller) return;\r\n\r\n//         await startLocalVideo();\r\n//         const answer = await peerConnection.current.createAnswer();\r\n//         await peerConnection.current.setLocalDescription(answer);\r\n\r\n//         ws.current.send(JSON.stringify({\r\n//             action: 'video_call_answer',\r\n//             answer: peerConnection.current.localDescription,\r\n//             recipient_id: userId\r\n//         }));\r\n\r\n//         setIsCallActive(true);\r\n//         setIsCallReceived(false);\r\n//     };\r\n\r\n//     const handleVideoCallAnswered = async (answer) => {\r\n//         if (!peerConnection.current) {\r\n//             createPeerConnection();\r\n//         }\r\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\r\n//         setIsCallActive(true);\r\n//     };\r\n\r\n//     const handleICECandidate = async (candidate) => {\r\n//         if (candidate) {\r\n//             await peerConnection.current.addIceCandidate(new RTCIceCandidate (candidate));\r\n//         }\r\n//     };\r\n\r\n//     const startCall = async () => {\r\n//         if (!peerConnection.current) createPeerConnection();\r\n//         await startLocalVideo();\r\n//         const offer = await peerConnection.current.createOffer();\r\n//         await peerConnection.current.setLocalDescription(offer);\r\n//         ws.current.send(JSON.stringify({\r\n//             action: 'video_call_offer',\r\n//             offer: offer,\r\n//             recipient_id: userId\r\n//         }));\r\n//         setIsCallActive(true);\r\n//     };\r\n\r\n//     const endCall = () => {\r\n//         if (ws.current) {\r\n//             ws.current.send(JSON.stringify({\r\n//                 action: 'end_call',\r\n//                 sender_id: currentUser.id,\r\n//                 recipient_id: userId\r\n//             }));\r\n//         }\r\n\r\n//         if (peerConnection.current) {\r\n//             peerConnection.current.close();\r\n//             peerConnection.current = null;\r\n//         }\r\n\r\n//         if (localVideoRef.current && localVideoRef.current.srcObject) {\r\n//             const stream = localVideoRef.current.srcObject;\r\n//             const tracks = stream.getTracks();\r\n//             tracks.forEach(track => track.stop());\r\n//             localVideoRef.current.srcObject = null;\r\n//         }\r\n\r\n//         if (remoteVideoRef.current) {\r\n//             remoteVideoRef.current.srcObject = null;\r\n//         }\r\n\r\n//         setIsCallActive(false);\r\n//         setIsCallReceived(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"flex h-screen\">\r\n//         <div className=\"flex-1 flex flex-col items-center justify-center\">\r\n//             <div className=\"bg-white shadow-md rounded-md p-4 w-96 h-96\">\r\n//                 <video ref={localVideoRef} autoPlay muted className=\"w-full h-full object-cover\" />\r\n//             </div>\r\n//             <div className=\"mt-4 flex space-x-4\">\r\n//                 {isCallActive && (\r\n//                     <button onClick={endCall} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition duration-200\">\r\n//                         <FaPhoneSlash className=\"w-6 h-6\" />\r\n//                     </button>\r\n//                 )}\r\n//                 {!isCallActive && isCallReceived && !isCaller && (\r\n//                     <div className=\"fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center z-50\">\r\n//                         <div className=\"bg-white rounded-lg shadow-lg p-6 w-80 text-center\">\r\n//                             <p className=\"text-lg font-semibold mb-4\">Incoming call from {currentUser.username}...</p>\r\n//                             <div className=\"flex justify-center space-x-4\">\r\n//                                 <button onClick={acceptCall} className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition duration-200\">\r\n//                                     Accept\r\n//                                 </button>\r\n//                                 <button onClick={endCall} className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition duration-200\">\r\n//                                     Decline\r\n//                                 </button>\r\n//                             </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 )}\r\n//                 {!isCallActive && !isCallReceived && isCaller && (\r\n//                     <button onClick={startCall} className=\"bg-blue-400 text-white px-4 py-2 rounded hover:bg-blue-500 transition duration-200\">\r\n//                         Start Call\r\n//                     </button>\r\n//                 )}\r\n//             </div>\r\n//         </div>\r\n//         <div className=\"flex-1 flex flex-col items-center justify-center\">\r\n//             <div className=\"bg-white shadow-md rounded-md p-4 w-96 h-96\">\r\n//                 <video ref={remoteVideoRef} autoPlay className=\"w-full h-full object-cover\" />\r\n//             </div>\r\n//         </div>\r\n//     </div>\r\n//     );\r\n// };\r\n\r\n// export default VideoCall;\r\n\r\n// import React, { useEffect, useRef, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n// import { useSelector } from 'react-redux';\r\n// import { FaVideo, FaPhoneSlash } from \"react-icons/fa\";\r\n\r\n// const VideoCall = () => {\r\n//     const { userId } = useParams();\r\n   \r\n//     const currentUser  = useSelector((state) => state.user.user);\r\n//     const localVideoRef = useRef(null);\r\n//     const remoteVideoRef = useRef(null);\r\n//     const peerConnection = useRef(null);\r\n//     const ws = useRef(null);\r\n//     const [isCallActive, setIsCallActive] = useState(false);\r\n//     const [isCallReceived, setIsCallReceived] = useState(false);\r\n//     const [isCaller, setIsCaller] = useState(true);\r\n//     const token = useSelector((state) => state.auth.token);\r\n    \r\n//     const [isWsConnected, setIsWsConnected] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n//         ws.current = new WebSocket(`${wsProtocol}://localhost:8000/ws/video-call/${currentUser.id}/${userId}/?token=${token}`);\r\n\r\n//         ws.current.onopen = () => {\r\n//             console.log(\"WebSocket connection established.\");\r\n//             setIsWsConnected(true); \r\n//         };\r\n\r\n//         ws.current.onmessage = (message) => {\r\n//             const data = JSON.parse(message.data);\r\n//             console.log(\"Message received from WebSocket:\", data);\r\n\r\n//             switch (data.action) {\r\n//                 case 'video_call_offer':\r\n//                     setIsCallReceived(true);\r\n//                     setIsCaller(false);\r\n//                     handleOffer(data.offer);\r\n//                     break;\r\n//                 case 'video_call_answer':\r\n//                     handleVideoCallAnswered(data.answer);\r\n//                     break;\r\n//                 case 'ice_candidate':\r\n//                     handleICECandidate(data.candidate);\r\n//                     break;\r\n//                 case 'call_accepted':\r\n//                     setIsCallActive(true);\r\n//                     setIsCallReceived(false);\r\n//                     break;\r\n//                 case 'call_rejected':\r\n//                     setIsCallReceived(false);\r\n//                     break;\r\n//                 case 'end_call':\r\n//                     if (isCallActive) {\r\n//                         endCall();\r\n//                     }\r\n//                     break;\r\n//                 default:\r\n//                     console.warn(`Unhandled action type: ${data.action}`);\r\n//                     break;\r\n//             }\r\n//         };\r\n\r\n//         return () => {\r\n//             if (ws.current) {\r\n//                 ws.current.close();\r\n//                 console.log(\"WebSocket connection closed.\");\r\n//                 setIsWsConnected(false);\r\n//             }\r\n//         };\r\n//     }, [userId,isCallActive]);\r\n\r\n//     const startLocalVideo = async () => {\r\n//         try {\r\n//             const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n//             if (localVideoRef.current) {\r\n//                 localVideoRef.current.srcObject = stream;\r\n//                 stream.getTracks().forEach(track => {\r\n//                     if (peerConnection.current) {\r\n//                         peerConnection.current.addTrack(track, stream);\r\n//                     }\r\n//                 });\r\n//             }\r\n//         } catch (error) {\r\n//             console.error(\"Error accessing local media: \", error);\r\n//         }\r\n//     };\r\n\r\n//     const createPeerConnection = () => {\r\n//         peerConnection.current = new RTCPeerConnection({\r\n//             iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\r\n//         });\r\n    \r\n//         peerConnection.current.onicecandidate = (event) => {\r\n//             if (event.candidate && isWsConnected) {\r\n//                 // Check if the WebSocket is open before sending\r\n//                 if (ws.current.readyState === WebSocket.OPEN) {\r\n//                     console.log('ice_candidate entered')\r\n//                     ws.current.send(JSON.stringify({\r\n//                         action: 'ice_candidate',\r\n//                         candidate: event.candidate,\r\n//                         recipient_id: userId\r\n//                     }));\r\n//                 } else {\r\n//                     console.warn(\"WebSocket is not open. Cannot send ICE candidate.\");\r\n//                 }\r\n//             }\r\n//         };\r\n    \r\n//         peerConnection.current.ontrack = (event) => {\r\n//             console.log(\"Track event received:\", event);\r\n//             if (remoteVideoRef.current) {\r\n//                 remoteVideoRef.current.srcObject = event.streams[0];\r\n//                 console.log(\"Remote video stream set:\", event.streams[0]);\r\n//             }\r\n//         };\r\n//     };\r\n\r\n//     const handleOffer = async (offer) => {\r\n//         if (!peerConnection.current) createPeerConnection();\r\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\r\n//     };\r\n\r\n//     const acceptCall = async () => {\r\n//         if (!peerConnection.current || isCaller) return;\r\n\r\n//         await startLocalVideo();\r\n//         const answer = await peerConnection.current.createAnswer();\r\n//         await peerConnection.current.setLocalDescription(answer);\r\n\r\n//         ws.current.send(JSON.stringify({\r\n//             action: 'video_call_answer',\r\n//             answer: peerConnection.current.localDescription,\r\n//             recipient_id: userId\r\n//         }));\r\n\r\n//         setIsCallActive(true);\r\n//         setIsCallReceived(false);\r\n//     };\r\n\r\n//     const handleVideoCallAnswered = async (answer) => {\r\n//         if (!peerConnection.current) {\r\n//             createPeerConnection();\r\n//         }\r\n//         await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\r\n//         setIsCallActive(true);\r\n//     };\r\n\r\n//     const handleICECandidate = async (candidate) => {\r\n//         if (candidate) {\r\n//             await peerConnection.current.addIceCandidate(new RTCIceCandidate (candidate));\r\n//         }\r\n//     };\r\n\r\n//     const startCall = async () => {\r\n//         if (!peerConnection.current) createPeerConnection();\r\n//         await startLocalVideo();\r\n//         const offer = await peerConnection.current.createOffer();\r\n//         await peerConnection.current.setLocalDescription(offer);\r\n//         ws.current.send(JSON.stringify({\r\n//             action: 'video_call_offer',\r\n//             offer: offer,\r\n//             recipient_id: userId\r\n//         }));\r\n//         setIsCallActive(true);\r\n//     };\r\n\r\n//     const endCall = () => {\r\n//         if (ws.current) {\r\n//             ws.current.send(JSON.stringify({\r\n//                 action: 'end_call',\r\n//                 sender_id: currentUser.id,\r\n//                 recipient_id: userId\r\n//             }));\r\n//         }\r\n\r\n//         if (peerConnection.current) {\r\n//             peerConnection.current.close();\r\n//             peerConnection.current = null;\r\n//         }\r\n\r\n//         if (localVideoRef.current && localVideoRef.current.srcObject) {\r\n//             const stream = localVideoRef.current.srcObject;\r\n//             const tracks = stream.getTracks();\r\n//             tracks.forEach(track => track.stop());\r\n//             localVideoRef.current.srcObject = null;\r\n//         }\r\n\r\n//         if (remoteVideoRef.current) {\r\n//             remoteVideoRef.current.srcObject = null;\r\n//         }\r\n\r\n//         setIsCallActive(false);\r\n//         setIsCallReceived(false);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"flex flex-col md:flex-row h-4/5 w-full\">\r\n//   {/* Local Video Section */}\r\n//   <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\r\n//     <div className=\"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\">\r\n//       <video ref={localVideoRef} autoPlay muted className=\"w-full h-full object-cover\" />\r\n//     </div>\r\n//     <div className=\"mt-2 flex space-x-4\">\r\n//       {isCallActive && (\r\n//         <button\r\n//           onClick={endCall}\r\n//           className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\"\r\n//         >\r\n//           <FaPhoneSlash className=\"w-6 h-6\" />\r\n//         </button>\r\n//       )}\r\n//       {!isCallActive && isCallReceived && !isCaller && (\r\n//         <div className=\"fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center z-50\">\r\n//           <div className=\"bg-white rounded-lg shadow-lg p-6 w-80 text-center\">\r\n//             <p className=\"text-lg font-semibold mb-4\">Incoming call from {userId}...</p>\r\n//             <div className=\"flex justify-center space-x-4\">\r\n//               <button\r\n//                 onClick={acceptCall}\r\n//                 className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-200\"\r\n//               >\r\n//                 Accept\r\n//               </button>\r\n//               <button\r\n//                 onClick={endCall}\r\n//                 className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\"\r\n//               >\r\n//                 Decline\r\n//               </button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//       {!isCallActive && !isCallReceived && isCaller && (\r\n//         <button\r\n//           onClick={startCall}\r\n//           className=\"bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition duration-200\"\r\n//         >\r\n//           Start Call\r\n//         </button>\r\n//       )}\r\n//     </div>\r\n//   </div>\r\n\r\n//   {/* Remote Video Section */}\r\n//   <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\r\n//     <div className=\"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\">\r\n//       <video ref={remoteVideoRef} autoPlay className=\"w-full h-full object-cover\" />\r\n//     </div>\r\n//   </div>\r\n// </div>\r\n//     );\r\n// };\r\n\r\n// export default VideoCall;\r\n\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { FaVideo, FaPhoneSlash } from \"react-icons/fa\";\r\n\r\nconst VideoCall = () => {\r\n    const { userId } = useParams();  // recipient's ID\r\n    const currentUser  = useSelector((state) => state.user.user); // current logged-in user (sender)\r\n    const localVideoRef = useRef(null);\r\n    const remoteVideoRef = useRef(null);\r\n    const peerConnection = useRef(null);\r\n    const ws = useRef(null);\r\n    const [isCallActive, setIsCallActive] = useState(false);\r\n    const [isCallReceived, setIsCallReceived] = useState(false);\r\n    const [isCaller, setIsCaller] = useState(true);\r\n    const token = useSelector((state) => state.auth.token);\r\n    const [isWsConnected, setIsWsConnected] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const wsProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n        ws.current = new WebSocket(`${wsProtocol}://localhost:8000/ws/video-call/${currentUser.id}/${userId}/?token=${token}`);\r\n\r\n        ws.current.onopen = () => {\r\n            console.log(\"WebSocket connection established.\");\r\n            setIsWsConnected(true);\r\n        };\r\n\r\n        ws.current.onmessage = (message) => {\r\n            const data = JSON.parse(message.data);\r\n            console.log(\"Message received from WebSocket:\", data);\r\n\r\n            switch (data.action) {\r\n                case 'video_call_offer':\r\n                    setIsCallReceived(true);\r\n                    setIsCaller(false);\r\n                    handleOffer(data.offer);\r\n                    break;\r\n                case 'video_call_answer':\r\n                    handleVideoCallAnswered(data.answer);\r\n                    break;\r\n                case 'ice_candidate':\r\n                    handleICECandidate(data.candidate);\r\n                    break;\r\n                case 'call_accepted':\r\n                    setIsCallActive(true);\r\n                    setIsCallReceived(false);\r\n                    break;\r\n                case 'call_rejected':\r\n                    setIsCallReceived(false);\r\n                    break;\r\n                case 'end_call':\r\n                    if (isCallActive) {\r\n                        endCall();\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.warn(`Unhandled action type: ${data.action}`);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        return () => {\r\n            if (ws.current) {\r\n                ws.current.close();\r\n                console.log(\"WebSocket connection closed.\");\r\n                setIsWsConnected(false);\r\n            }\r\n        };\r\n    }, [userId, isCallActive]);\r\n\r\n    const startLocalVideo = async () => {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n            if (localVideoRef.current) {\r\n                localVideoRef.current.srcObject = stream;\r\n                stream.getTracks().forEach(track => {\r\n                    if (peerConnection.current) {\r\n                        peerConnection.current.addTrack(track, stream);\r\n                    }\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error accessing local media: \", error);\r\n        }\r\n    };\r\n    const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n    const createPeerConnection = () => {\r\n        peerConnection.current = new RTCPeerConnection({\r\n            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\r\n        });\r\n\r\n        peerConnection.current.onicecandidate = async (event) => {\r\n            if (event.candidate) {\r\n                // Wait for WebSocket to be open\r\n                while (ws.current.readyState !== WebSocket.OPEN) {\r\n                    await delay(100); // Check every 100ms\r\n                }\r\n                \r\n                ws.current.send(JSON.stringify({\r\n                    action: 'ice_candidate',\r\n                    candidate: event.candidate,\r\n                    recipient_id: userId\r\n                }));\r\n            }\r\n        };\r\n\r\n        peerConnection.current.ontrack = (event) => {\r\n            if (remoteVideoRef.current) {\r\n                remoteVideoRef.current.srcObject = event.streams[0];\r\n            }\r\n        };\r\n    };\r\n\r\n    const handleOffer = async (offer) => {\r\n        if (!peerConnection.current) createPeerConnection();\r\n        await peerConnection.current.setRemoteDescription(new RTCSessionDescription(offer));\r\n    };\r\n\r\n    const acceptCall = async () => {\r\n        if (!peerConnection.current || isCaller) return;\r\n\r\n        await startLocalVideo();\r\n        const answer = await peerConnection.current.createAnswer();\r\n        await peerConnection.current.setLocalDescription(answer);\r\n\r\n        ws.current.send(JSON.stringify({\r\n            action: 'video_call_answer',\r\n            answer: peerConnection.current.localDescription,\r\n            recipient_id: userId\r\n        }));\r\n\r\n        setIsCallActive(true);\r\n        setIsCallReceived(false);\r\n    };\r\n\r\n    const handleVideoCallAnswered = async (answer) => {\r\n        if (!peerConnection.current) {\r\n            createPeerConnection();\r\n        }\r\n        await peerConnection.current.setRemoteDescription(new RTCSessionDescription(answer));\r\n        setIsCallActive(true);\r\n    };\r\n\r\n    const handleICECandidate = async (candidate) => {\r\n        if (candidate) {\r\n            await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));\r\n        }\r\n    };\r\n\r\n    const startCall = async () => {\r\n        if (!peerConnection.current) createPeerConnection();\r\n        await startLocalVideo();\r\n        const offer = await peerConnection.current.createOffer();\r\n        await peerConnection.current.setLocalDescription(offer);\r\n        ws.current.send(JSON.stringify({\r\n            action: 'video_call_offer',\r\n            offer: offer,\r\n            recipient_id: userId\r\n        }));\r\n        setIsCallActive(true);\r\n    };\r\n\r\n    const endCall = () => {\r\n        if (ws.current) {\r\n            ws.current.send(JSON.stringify({\r\n                action: 'end_call',\r\n                sender_id: currentUser.id,\r\n                recipient_id: userId\r\n            }));\r\n        }\r\n\r\n        if (peerConnection.current) {\r\n            peerConnection.current.close();\r\n            peerConnection.current = null;\r\n        }\r\n\r\n        if (localVideoRef.current && localVideoRef.current.srcObject) {\r\n            const stream = localVideoRef.current.srcObject;\r\n            stream.getTracks().forEach(track => track.stop());\r\n            localVideoRef.current.srcObject = null;\r\n        }\r\n\r\n        if (remoteVideoRef.current) {\r\n            remoteVideoRef.current.srcObject = null;\r\n        }\r\n\r\n        setIsCallActive(false);\r\n        setIsCallReceived(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col md:flex-row h-4/5 w-full\">\r\n            {/* Local Video Section */}\r\n            <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\r\n                <div className=\"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\">\r\n                    <video ref={localVideoRef} autoPlay muted className=\"w-full h-full object-cover\" />\r\n                </div>\r\n                <div className=\"mt-2 flex space-x-4\">\r\n                    {isCallActive && (\r\n                        <button\r\n                            onClick={endCall}\r\n                            className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\"\r\n                        >\r\n                            <FaPhoneSlash className=\"w-6 h-6\" />\r\n                        </button>\r\n                    )}\r\n                    {!isCallActive && isCallReceived && !isCaller && (\r\n                        <div className=\"fixed inset-0 bg-gray-800 bg-opacity-75 flex justify-center items-center z-50\">\r\n                            <div className=\"bg-white rounded-lg shadow-lg p-6 w-80 text-center\">\r\n                                <p className=\"text-lg font-semibold mb-4\">Incoming call from {userId}...</p>\r\n                                <div className=\"flex justify-center space-x-4\">\r\n                                    <button\r\n                                        onClick={acceptCall}\r\n                                        className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition duration-200\"\r\n                                    >\r\n                                        Accept\r\n                                    </button>\r\n                                    <button\r\n                                        onClick={endCall}\r\n                                        className=\"bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition duration-200\"\r\n                                    >\r\n                                        Decline\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    {!isCallActive && !isCallReceived && isCaller && (\r\n                        <button\r\n                            onClick={startCall}\r\n                            className=\"bg-blue-400 text-white px-4 py-2 rounded-lg hover:bg-blue-500 transition duration-200\"\r\n                        >\r\n                            Start Call\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n            {/* Remote Video Section */}\r\n            <div className=\"flex-1 flex flex-col items-center justify-center p-4\">\r\n                <div className=\"bg-white shadow-lg rounded-lg overflow-hidden w-full max-w-md h-full md:max-h-96 flex items-center justify-center\">\r\n                    <video ref={remoteVideoRef} autoPlay className=\"w-full h-full object-cover\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoCall;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,EAAEC,YAAY,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,SAAS,GAAGA,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}