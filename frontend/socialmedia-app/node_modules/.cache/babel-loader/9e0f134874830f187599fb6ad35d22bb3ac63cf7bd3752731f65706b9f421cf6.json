{"ast":null,"code":"module.exports = which;\nwhich.sync = whichSync;\nvar isWindows = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';\nvar path = require('path');\nvar COLON = isWindows ? ';' : ':';\nvar isexe = require('isexe');\nfunction getNotFoundError(cmd) {\n  var er = new Error('not found: ' + cmd);\n  er.code = 'ENOENT';\n  return er;\n}\nfunction getPathInfo(cmd, opt) {\n  var colon = opt.colon || COLON;\n  var pathEnv = opt.path || process.env.PATH || '';\n  var pathExt = [''];\n  pathEnv = pathEnv.split(colon);\n  var pathExtExe = '';\n  if (isWindows) {\n    pathEnv.unshift(process.cwd());\n    pathExtExe = opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM';\n    pathExt = pathExtExe.split(colon);\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/)) pathEnv = [''];\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  };\n}\nfunction which(cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n  var info = getPathInfo(cmd, opt);\n  var pathEnv = info.env;\n  var pathExt = info.ext;\n  var pathExtExe = info.extExe;\n  var found = [];\n  (function F(i, l) {\n    if (i === l) {\n      if (opt.all && found.length) return cb(null, found);else return cb(getNotFoundError(cmd));\n    }\n    var pathPart = pathEnv[i];\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"') pathPart = pathPart.slice(1, -1);\n    var p = path.join(pathPart, cmd);\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p;\n    }\n    ;\n    (function E(ii, ll) {\n      if (ii === ll) return F(i + 1, l);\n      var ext = pathExt[ii];\n      isexe(p + ext, {\n        pathExt: pathExtExe\n      }, function (er, is) {\n        if (!er && is) {\n          if (opt.all) found.push(p + ext);else return cb(null, p + ext);\n        }\n        return E(ii + 1, ll);\n      });\n    })(0, pathExt.length);\n  })(0, pathEnv.length);\n}\nfunction whichSync(cmd, opt) {\n  opt = opt || {};\n  var info = getPathInfo(cmd, opt);\n  var pathEnv = info.env;\n  var pathExt = info.ext;\n  var pathExtExe = info.extExe;\n  var found = [];\n  for (var i = 0, l = pathEnv.length; i < l; i++) {\n    var pathPart = pathEnv[i];\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"') pathPart = pathPart.slice(1, -1);\n    var p = path.join(pathPart, cmd);\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p;\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j++) {\n      var cur = p + pathExt[j];\n      var is;\n      try {\n        is = isexe.sync(cur, {\n          pathExt: pathExtExe\n        });\n        if (is) {\n          if (opt.all) found.push(cur);else return cur;\n        }\n      } catch (ex) {}\n    }\n  }\n  if (opt.all && found.length) return found;\n  if (opt.nothrow) return null;\n  throw getNotFoundError(cmd);\n}","map":{"version":3,"names":["module","exports","which","sync","whichSync","isWindows","process","platform","env","OSTYPE","path","require","COLON","isexe","getNotFoundError","cmd","er","Error","code","getPathInfo","opt","colon","pathEnv","PATH","pathExt","split","pathExtExe","unshift","cwd","PATHEXT","indexOf","match","ext","extExe","cb","info","found","F","i","l","all","length","pathPart","charAt","slice","p","join","test","E","ii","ll","is","push","j","cur","ex","nothrow"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/node_modules/fluent-ffmpeg/node_modules/which/which.js"],"sourcesContent":["module.exports = which\nwhich.sync = whichSync\n\nvar isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nvar path = require('path')\nvar COLON = isWindows ? ';' : ':'\nvar isexe = require('isexe')\n\nfunction getNotFoundError (cmd) {\n  var er = new Error('not found: ' + cmd)\n  er.code = 'ENOENT'\n\n  return er\n}\n\nfunction getPathInfo (cmd, opt) {\n  var colon = opt.colon || COLON\n  var pathEnv = opt.path || process.env.PATH || ''\n  var pathExt = ['']\n\n  pathEnv = pathEnv.split(colon)\n\n  var pathExtExe = ''\n  if (isWindows) {\n    pathEnv.unshift(process.cwd())\n    pathExtExe = (opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM')\n    pathExt = pathExtExe.split(colon)\n\n\n    // Always test the cmd itself first.  isexe will check to make sure\n    // it's found in the pathExt set.\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  if (cmd.match(/\\//) || isWindows && cmd.match(/\\\\/))\n    pathEnv = ['']\n\n  return {\n    env: pathEnv,\n    ext: pathExt,\n    extExe: pathExtExe\n  }\n}\n\nfunction which (cmd, opt, cb) {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  ;(function F (i, l) {\n    if (i === l) {\n      if (opt.all && found.length)\n        return cb(null, found)\n      else\n        return cb(getNotFoundError(cmd))\n    }\n\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && (/^\\.[\\\\\\/]/).test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    ;(function E (ii, ll) {\n      if (ii === ll) return F(i + 1, l)\n      var ext = pathExt[ii]\n      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {\n        if (!er && is) {\n          if (opt.all)\n            found.push(p + ext)\n          else\n            return cb(null, p + ext)\n        }\n        return E(ii + 1, ll)\n      })\n    })(0, pathExt.length)\n  })(0, pathEnv.length)\n}\n\nfunction whichSync (cmd, opt) {\n  opt = opt || {}\n\n  var info = getPathInfo(cmd, opt)\n  var pathEnv = info.env\n  var pathExt = info.ext\n  var pathExtExe = info.extExe\n  var found = []\n\n  for (var i = 0, l = pathEnv.length; i < l; i ++) {\n    var pathPart = pathEnv[i]\n    if (pathPart.charAt(0) === '\"' && pathPart.slice(-1) === '\"')\n      pathPart = pathPart.slice(1, -1)\n\n    var p = path.join(pathPart, cmd)\n    if (!pathPart && /^\\.[\\\\\\/]/.test(cmd)) {\n      p = cmd.slice(0, 2) + p\n    }\n    for (var j = 0, ll = pathExt.length; j < ll; j ++) {\n      var cur = p + pathExt[j]\n      var is\n      try {\n        is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}