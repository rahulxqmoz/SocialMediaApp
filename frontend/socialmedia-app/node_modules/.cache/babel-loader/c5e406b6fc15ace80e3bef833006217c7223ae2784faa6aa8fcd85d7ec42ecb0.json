{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_URL } from '../../config';\nimport { fetchPosts } from './postSlice';\nexport const fetchLikeStatus = createAsyncThunk('likedPosts/fetchLikeStatus', async ({\n  posts,\n  token\n}) => {\n  const likeStatuses = {};\n  for (let post of posts) {\n    const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_liked/`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.ok) {\n      const result = await response.json();\n      likeStatuses[post.id] = result.liked; // Assume the response contains { liked: true/false }\n    }\n  }\n  return likeStatuses;\n});\nconst likedPostsSlice = createSlice({\n  name: 'likedPosts',\n  initialState: {},\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchLikeStatus.fulfilled, (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    });\n    // .addCase(handleLike.fulfilled, (state, action) => {\n    //   state[action.payload.postId] = action.payload.liked;\n    // })\n    // .addCase(handleLike.fulfilled, (state, action) => {\n    //   const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\n    //   if (postIndex !== -1) {\n    //     state.posts[postIndex].liked = action.payload.liked;\n    //     state.posts[postIndex].total_likes += action.payload.liked ? 1 : -1;\n    //   }\n    // })\n    // .addCase(handleLike.rejected, (state, action) => {\n    //   state.error = action.payload.message; // Extract the error message\n    // });\n  }\n});\nexport default likedPostsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","BASE_URL","fetchPosts","fetchLikeStatus","posts","token","likeStatuses","post","response","fetch","id","method","headers","Authorization","ok","result","json","liked","likedPostsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/features/auth/likeSlice.js"],"sourcesContent":["\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { BASE_URL } from '../../config';\r\nimport { fetchPosts } from './postSlice';\r\n\r\n\r\nexport const fetchLikeStatus = createAsyncThunk(\r\n  'likedPosts/fetchLikeStatus',\r\n  async ({ posts, token }) => {\r\n    const likeStatuses = {};\r\n    for (let post of posts) {\r\n      const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_liked/`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        likeStatuses[post.id] = result.liked; // Assume the response contains { liked: true/false }\r\n      }\r\n    }\r\n    return likeStatuses;\r\n  }\r\n);\r\n\r\n\r\n\r\nconst likedPostsSlice = createSlice({\r\n  name: 'likedPosts',\r\n  initialState: {},\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchLikeStatus.fulfilled, (state, action) => {\r\n        return { ...state, ...action.payload };\r\n      })\r\n      // .addCase(handleLike.fulfilled, (state, action) => {\r\n      //   state[action.payload.postId] = action.payload.liked;\r\n      // })\r\n      // .addCase(handleLike.fulfilled, (state, action) => {\r\n      //   const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\r\n      //   if (postIndex !== -1) {\r\n      //     state.posts[postIndex].liked = action.payload.liked;\r\n      //     state.posts[postIndex].total_likes += action.payload.liked ? 1 : -1;\r\n      //   }\r\n      // })\r\n      // .addCase(handleLike.rejected, (state, action) => {\r\n      //   state.error = action.payload.message; // Extract the error message\r\n      // });\r\n  },\r\n});\r\n\r\nexport default likedPostsSlice.reducer;\r\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,UAAU,QAAQ,aAAa;AAGxC,OAAO,MAAMC,eAAe,GAAGH,gBAAgB,CAC7C,4BAA4B,EAC5B,OAAO;EAAEI,KAAK;EAAEC;AAAM,CAAC,KAAK;EAC1B,MAAMC,YAAY,GAAG,CAAC,CAAC;EACvB,KAAK,IAAIC,IAAI,IAAIH,KAAK,EAAE;IACtB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,QAAQ,cAAcM,IAAI,CAACG,EAAE,eAAe,EAAE;MAC5EC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUR,KAAK;MAChC;IACF,CAAC,CAAC;IACF,IAAIG,QAAQ,CAACM,EAAE,EAAE;MACf,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCV,YAAY,CAACC,IAAI,CAACG,EAAE,CAAC,GAAGK,MAAM,CAACE,KAAK,CAAC,CAAC;IACxC;EACF;EACA,OAAOX,YAAY;AACrB,CACF,CAAC;AAID,MAAMY,eAAe,GAAGnB,WAAW,CAAC;EAClCoB,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAE,CAAC,CAAC;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACrB,eAAe,CAACsB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrD,OAAO;QAAE,GAAGD,KAAK;QAAE,GAAGC,MAAM,CAACC;MAAQ,CAAC;IACxC,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;AACF,CAAC,CAAC;AAEF,eAAeV,eAAe,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}