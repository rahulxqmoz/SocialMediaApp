{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n/*\n *! Input-related methods\n */\n\nmodule.exports = function (proto) {\n  /**\n   * Add an input to command\n   *\n   * Also switches \"current input\", that is the input that will be affected\n   * by subsequent input-related methods.\n   *\n   * Note: only one stream input is supported for now.\n   *\n   * @method FfmpegCommand#input\n   * @category Input\n   * @aliases mergeAdd,addInput\n   *\n   * @param {String|Readable} source input file path or readable stream\n   * @return FfmpegCommand\n   */\n  proto.mergeAdd = proto.addInput = proto.input = function (source) {\n    var isFile = false;\n    var isStream = false;\n    if (typeof source !== 'string') {\n      if (!('readable' in source) || !source.readable) {\n        throw new Error('Invalid input');\n      }\n      var hasInputStream = this._inputs.some(function (input) {\n        return input.isStream;\n      });\n      if (hasInputStream) {\n        throw new Error('Only one input stream is supported');\n      }\n      isStream = true;\n      source.pause();\n    } else {\n      var protocol = source.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n    this._inputs.push(this._currentInput = {\n      source: source,\n      isFile: isFile,\n      isStream: isStream,\n      options: utils.args()\n    });\n    return this;\n  };\n\n  /**\n   * Specify input format for the last specified input\n   *\n   * @method FfmpegCommand#inputFormat\n   * @category Input\n   * @aliases withInputFormat,fromFormat\n   *\n   * @param {String} format input format\n   * @return FfmpegCommand\n   */\n  proto.withInputFormat = proto.inputFormat = proto.fromFormat = function (format) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n    this._currentInput.options('-f', format);\n    return this;\n  };\n\n  /**\n   * Specify input FPS for the last specified input\n   * (only valid for raw video formats)\n   *\n   * @method FfmpegCommand#inputFps\n   * @category Input\n   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput\n   *\n   * @param {Number} fps input FPS\n   * @return FfmpegCommand\n   */\n  proto.withInputFps = proto.withInputFPS = proto.withFpsInput = proto.withFPSInput = proto.inputFPS = proto.inputFps = proto.fpsInput = proto.FPSInput = function (fps) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n    this._currentInput.options('-r', fps);\n    return this;\n  };\n\n  /**\n   * Use native framerate for the last specified input\n   *\n   * @method FfmpegCommand#native\n   * @category Input\n   * @aliases nativeFramerate,withNativeFramerate\n   *\n   * @return FfmmegCommand\n   */\n  proto.nativeFramerate = proto.withNativeFramerate = proto.native = function () {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n    this._currentInput.options('-re');\n    return this;\n  };\n\n  /**\n   * Specify input seek time for the last specified input\n   *\n   * @method FfmpegCommand#seekInput\n   * @category Input\n   * @aliases setStartTime,seekTo\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.setStartTime = proto.seekInput = function (seek) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n    this._currentInput.options('-ss', seek);\n    return this;\n  };\n\n  /**\n   * Loop over the last specified input\n   *\n   * @method FfmpegCommand#loop\n   * @category Input\n   *\n   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.loop = function (duration) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n    this._currentInput.options('-loop', '1');\n    if (typeof duration !== 'undefined') {\n      this.duration(duration);\n    }\n    return this;\n  };\n};","map":{"version":3,"names":["utils","require","module","exports","proto","mergeAdd","addInput","input","source","isFile","isStream","readable","Error","hasInputStream","_inputs","some","pause","protocol","match","push","_currentInput","options","args","withInputFormat","inputFormat","fromFormat","format","withInputFps","withInputFPS","withFpsInput","withFPSInput","inputFPS","inputFps","fpsInput","FPSInput","fps","nativeFramerate","withNativeFramerate","native","setStartTime","seekInput","seek","loop","duration"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/node_modules/fluent-ffmpeg/lib/options/inputs.js"],"sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n/*\n *! Input-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Add an input to command\n   *\n   * Also switches \"current input\", that is the input that will be affected\n   * by subsequent input-related methods.\n   *\n   * Note: only one stream input is supported for now.\n   *\n   * @method FfmpegCommand#input\n   * @category Input\n   * @aliases mergeAdd,addInput\n   *\n   * @param {String|Readable} source input file path or readable stream\n   * @return FfmpegCommand\n   */\n  proto.mergeAdd =\n  proto.addInput =\n  proto.input = function(source) {\n    var isFile = false;\n    var isStream = false;\n\n    if (typeof source !== 'string') {\n      if (!('readable' in source) || !(source.readable)) {\n        throw new Error('Invalid input');\n      }\n\n      var hasInputStream = this._inputs.some(function(input) {\n        return input.isStream;\n      });\n\n      if (hasInputStream) {\n        throw new Error('Only one input stream is supported');\n      }\n\n      isStream = true;\n      source.pause();\n    } else {\n      var protocol = source.match(/^([a-z]{2,}):/i);\n      isFile = !protocol || protocol[0] === 'file';\n    }\n\n    this._inputs.push(this._currentInput = {\n      source: source,\n      isFile: isFile,\n      isStream: isStream,\n      options: utils.args()\n    });\n\n    return this;\n  };\n\n\n  /**\n   * Specify input format for the last specified input\n   *\n   * @method FfmpegCommand#inputFormat\n   * @category Input\n   * @aliases withInputFormat,fromFormat\n   *\n   * @param {String} format input format\n   * @return FfmpegCommand\n   */\n  proto.withInputFormat =\n  proto.inputFormat =\n  proto.fromFormat = function(format) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-f', format);\n    return this;\n  };\n\n\n  /**\n   * Specify input FPS for the last specified input\n   * (only valid for raw video formats)\n   *\n   * @method FfmpegCommand#inputFps\n   * @category Input\n   * @aliases withInputFps,withInputFPS,withFpsInput,withFPSInput,inputFPS,inputFps,fpsInput\n   *\n   * @param {Number} fps input FPS\n   * @return FfmpegCommand\n   */\n  proto.withInputFps =\n  proto.withInputFPS =\n  proto.withFpsInput =\n  proto.withFPSInput =\n  proto.inputFPS =\n  proto.inputFps =\n  proto.fpsInput =\n  proto.FPSInput = function(fps) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Use native framerate for the last specified input\n   *\n   * @method FfmpegCommand#native\n   * @category Input\n   * @aliases nativeFramerate,withNativeFramerate\n   *\n   * @return FfmmegCommand\n   */\n  proto.nativeFramerate =\n  proto.withNativeFramerate =\n  proto.native = function() {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-re');\n    return this;\n  };\n\n\n  /**\n   * Specify input seek time for the last specified input\n   *\n   * @method FfmpegCommand#seekInput\n   * @category Input\n   * @aliases setStartTime,seekTo\n   *\n   * @param {String|Number} seek seek time in seconds or as a '[hh:[mm:]]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.setStartTime =\n  proto.seekInput = function(seek) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-ss', seek);\n\n    return this;\n  };\n\n\n  /**\n   * Loop over the last specified input\n   *\n   * @method FfmpegCommand#loop\n   * @category Input\n   *\n   * @param {String|Number} [duration] loop duration in seconds or as a '[[hh:]mm:]ss[.xxx]' string\n   * @return FfmpegCommand\n   */\n  proto.loop = function(duration) {\n    if (!this._currentInput) {\n      throw new Error('No input specified');\n    }\n\n    this._currentInput.options('-loop', '1');\n\n    if (typeof duration !== 'undefined') {\n      this.duration(duration);\n    }\n\n    return this;\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}