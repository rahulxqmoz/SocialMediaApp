{"ast":null,"code":"var _jsxFileName = \"H:\\\\SecondProject-DjangoReact\\\\frontend\\\\socialmedia-app\\\\src\\\\pages\\\\ProfilePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { BASE_URL } from '../config';\nimport Modal from 'react-modal';\nimport 'cropperjs/dist/cropper.css';\nimport { logout, updateUserProfileImage } from '../features/auth/userSlice';\nimport { showErrorToast } from '../components/ErroToast';\nimport ImageCropper from '../components/Cropper';\nimport 'react-quill/dist/quill.snow.css';\nimport PostBox from '../components/ProfilePageComponents/PostBoxComponent';\nimport { showSuccessToast } from '../components/CustomToast';\nimport ProfileHeader from '../components/ProfilePageComponents/ProfileHeader';\nimport ProfileSection from '../components/ProfilePageComponents/ProfileSection';\nimport PostListComponent from '../components/ProfilePageComponents/PostListComponent';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchProfile, uploadProfileImage } from '../features/auth/profileSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst ProfilePage = () => {\n  _s();\n  const [error, setError] = useState(null);\n  //const [posts, setPosts] = useState([]);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalImage, setModalImage] = useState('');\n  const [openCommentId, setOpenCommentId] = useState(null);\n  const [imageType, setImageType] = useState(''); // 'cover' or 'profile'\n  const cropperRef = useRef(null);\n  const [likedPosts, setLikedPosts] = useState({});\n  const [comments, setComments] = useState({});\n  const [newComment, setNewComment] = useState(\"\");\n  const [replyingToCommentId, setReplyingToCommentId] = useState(null);\n  const user = useSelector(state => state.user.user);\n  const token = useSelector(state => state.auth.token);\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  //const [bookmarks, setBookmarks] = useState([]);\n  const [bookmarkPosts, setbookmarkPosts] = useState({});\n  const [loading, setLoading] = useState(false);\n  const {\n    profile,\n    isFollowing,\n    followerCount,\n    followingCount\n  } = useSelector(state => state.profile);\n  const {\n    posts,\n    bookmarks,\n    loading: postLoading,\n    error: postError\n  } = useSelector(state => state.posts);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const fetchBookmarks = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/bookmarks`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }); // Fetch user's bookmarks\n      setBookmarks(response.data.map(bookmark => bookmark.post));\n    } catch (error) {\n      console.error('Error fetching bookmarks:', error);\n    }\n  };\n  const fetchComments = async postId => {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments/`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setComments(prevComments => ({\n        ...prevComments,\n        [postId]: response.data\n      }));\n    } catch (error) {\n      console.log(\"Error fetching comments\");\n    }\n  };\n  const fetchPosts = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/api/posts/?user_id=${user.id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setPosts(response.data);\n      console.log(response.data); // Set the fetched posts\n    } catch (err) {\n      console.log(\"Error fetching posts\");\n    }\n  };\n  useEffect(() => {\n    if (user && token) {\n      dispatch(fetchProfile({\n        userId: user.id,\n        token\n      }));\n      fetchPosts();\n      fetchBookmarks();\n    }\n  }, [user, token]);\n  useEffect(() => {\n    if (posts.length > 0) {\n      posts.forEach(post => {\n        console.log(`Correct post id: ${post.id}`);\n        fetchComments(post.id);\n      });\n    }\n  }, [posts]);\n  useEffect(() => {\n    const fetchLikeStatus = async () => {\n      try {\n        const likeStatuses = {};\n        for (let post of posts) {\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_liked/`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const result = await response.json();\n            likeStatuses[post.id] = result.liked; // Assume the response contains { liked: true/false }\n            console.log('check liked');\n            console.log(result);\n          }\n        }\n        setLikedPosts(likeStatuses);\n      } catch (error) {\n        console.error('Error fetching like status:', error);\n      }\n    };\n    const fetchBookmarkStatus = async () => {\n      try {\n        const bookmarkPosts = {};\n        for (let post of posts) {\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_bookmarked/`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const result = await response.json();\n            bookmarkPosts[post.id] = result.bookmarked; // Assume the response contains { liked: true/false }\n          }\n        }\n        setbookmarkPosts(bookmarkPosts);\n      } catch (error) {\n        console.error('Error fetching like status:', error);\n      }\n    };\n    fetchLikeStatus();\n    fetchBookmarkStatus();\n  }, [posts, token, user]);\n  const handleLogout = () => {\n    dispatch(logout());\n    navigate('/login');\n  };\n  const handleFileChange = (event, type) => {\n    const fileInput = event.target;\n    const file = event.target.files[0];\n    if (file) {\n      const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n      if (!validImageTypes.includes(file.type)) {\n        // setError('Please select a valid image file (JPEG, JPG, or PNG).');\n        showErrorToast('Please select a valid image file (JPEG, JPG, or PNG).');\n        fileInput.value = null;\n        return;\n      }\n    }\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setModalImage(reader.result);\n        setImageType(type);\n        setModalIsOpen(true);\n        fileInput.value = null;\n      };\n      reader.readAsDataURL(file);\n    } else {\n      console.error('No file selected.');\n    }\n  };\n  const handleImageUpload = async () => {\n    if (!cropperRef.current) return;\n    const cropper = cropperRef.current.cropper;\n    const canvas = cropper.getCroppedCanvas();\n    canvas.toBlob(async blob => {\n      const formData = new FormData();\n      formData.append(imageType === 'cover' ? 'cover_pic' : 'profile_pic', blob, 'cropped-image.jpg');\n      try {\n        dispatch(uploadProfileImage({\n          imageBlob: blob,\n          imageType,\n          token,\n          userId: user.id\n        }));\n        closeModal();\n      } catch (err) {\n        setError('An error occurred while uploading the image.');\n      }\n    }, 'image/jpeg');\n  };\n  const openModal = type => {\n    setImageType(type);\n    document.getElementById(`${type}-upload`).click(); // Trigger the file input click\n  };\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setModalImage('');\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-500 text-center mt-4\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }, this);\n  }\n  if (!profile) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this);\n  }\n  const handleNewPost = async postData => {\n    const userId = user.id;\n    setLoading(true);\n    if (!postData.content || postData.content.trim() === '') {\n      showErrorToast(\"Content cannot be empty.\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const formData = new FormData();\n      formData.append('content', postData.content);\n      formData.append('user', user.id);\n      if (postData.image) {\n        const imageBlob = await fetch(postData.image).then(res => res.blob());\n        formData.append('image', imageBlob, 'post.jpg');\n      }\n      console.log(`video:${postData.video}`);\n      if (postData.video) {\n        const videoBlob = await fetch(postData.video).then(res => res.blob());\n        const videoSizeMB = videoBlob.size / (1024 * 1024);\n        if (videoSizeMB > 100) {\n          showErrorToast(\"Video size exceeds 100MB. Please upload a smaller file.\");\n          setLoading(false);\n          return;\n        }\n        formData.append('video', videoBlob, 'post.mp4');\n      }\n      formData.append('is_approved', true);\n      for (const [key, value] of formData.entries()) {\n        console.log(`${key}:`, value);\n      }\n      const response = await axios.post(`${BASE_URL}/api/posts/`, formData, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setPosts(prevPosts => [response.data, ...prevPosts]);\n      showSuccessToast(\"Post successfully submitted\");\n    } catch (err) {\n      showErrorToast(\"Error while submitting!\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleLike = async postId => {\n    try {\n      const response = await fetch(`${BASE_URL}/api/likes/`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          post: postId\n        })\n      });\n      if (response.status === 201) {\n        console.log('Post liked');\n        setLikedPosts(prev => ({\n          ...prev,\n          [postId]: true\n        }));\n      } else if (response.status === 204) {\n        console.log('Post unliked');\n        setLikedPosts(prev => ({\n          ...prev,\n          [postId]: false\n        }));\n      } else {\n        console.log('Error:', await response.json());\n      }\n      fetchPosts();\n    } catch (error) {\n      console.error('Error liking/unliking post:', error);\n    }\n  };\n  const handleSubmitComment = async (postId, commentText, parentId = null) => {\n    if (!commentText.trim()) {\n      showErrorToast('Empty Comment Box');\n      return;\n    }\n    console.log(postId, commentText, user.id, parentId, token);\n    try {\n      const response = await axios.post(`${BASE_URL}/api/comments/`, {\n        post: postId,\n        content: commentText,\n        user: user.id,\n        parent: parentId // Include parentId here\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const newCommentData = response.data;\n      setComments(prevComments => ({\n        ...prevComments,\n        [postId]: [...(prevComments[postId] || []), newCommentData]\n      }));\n      setNewComment(\"\");\n      setReplyingToCommentId(null);\n      showSuccessToast(\"Comment submitted successfully\");\n      fetchPosts();\n    } catch (error) {\n      showErrorToast(\"Error submitting comment\");\n    }\n  };\n  const handleToggleComments = postId => {\n    if (openCommentId === postId) {\n      setOpenCommentId(null); // Close the comments section if it's already open\n    } else {\n      setOpenCommentId(postId); // Open the comments section for the specific post\n    }\n  };\n  const handleAddEmoji = emoji => {\n    setCommentText(prev => prev + emoji.native); // Append the selected emoji to the comment text\n  };\n  const handleBookmark = async postId => {\n    try {\n      if (bookmarkPosts[postId]) {\n        // If already bookmarked, unbookmark the post\n        await axios.delete(`${BASE_URL}/api/bookmarks/${postId}`, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setbookmarkPosts(prevState => ({\n          ...prevState,\n          [postId]: false\n        }));\n        showErrorToast('Post removed from Bookmarks');\n      } else {\n        // If not bookmarked, bookmark the post\n        await axios.post(`${BASE_URL}/api/bookmarks/`, {\n          post: postId\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        setbookmarkPosts(prevState => ({\n          ...prevState,\n          [postId]: true\n        }));\n        showSuccessToast('Added to Bookmarks');\n      }\n    } catch (error) {\n      console.error('Error updating bookmark:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-3xl mx-auto bg-white shadow-md rounded-md overflow-hidden mt-8\",\n    children: [/*#__PURE__*/_jsxDEV(ProfileHeader, {\n      profile: profile,\n      handleFileChange: handleFileChange,\n      openModal: openModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 sm:p-6\",\n      children: [/*#__PURE__*/_jsxDEV(ProfileSection, {\n        user: user,\n        profile: profile,\n        followerCount: followerCount,\n        followingCount: followingCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 5\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(PostBox, {\n        onPostSubmit: handleNewPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PostListComponent, {\n        posts: posts,\n        user: user,\n        likedPosts: likedPosts,\n        handleLike: handleLike,\n        handleToggleComments: handleToggleComments,\n        handleBookmark: handleBookmark,\n        bookmarkPosts: bookmarkPosts,\n        openCommentId: openCommentId,\n        handleSubmitComment: handleSubmitComment,\n        replyingToCommentId: replyingToCommentId,\n        setReplyingToCommentId: setReplyingToCommentId,\n        setCommentText: setCommentText,\n        setShowEmojiPicker: setShowEmojiPicker,\n        showEmojiPicker: showEmojiPicker,\n        handleAddEmoji: handleAddEmoji,\n        comments: comments,\n        commentText: commentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: closeModal,\n      className: \"w-full max-w-2xl mx-auto mt-16\",\n      children: /*#__PURE__*/_jsxDEV(ImageCropper, {\n        modalImage: modalImage,\n        onSave: handleImageUpload,\n        onClose: closeModal,\n        ref: cropperRef,\n        imageType: imageType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 393,\n    columnNumber: 5\n  }, this);\n};\n_s(ProfilePage, \"2QRHtk4D2W2e2OpwMUJ12oF7Itk=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch, useNavigate];\n});\n_c = ProfilePage;\nexport default ProfilePage;\nvar _c;\n$RefreshReg$(_c, \"ProfilePage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useDispatch","useSelector","axios","BASE_URL","Modal","logout","updateUserProfileImage","showErrorToast","ImageCropper","PostBox","showSuccessToast","ProfileHeader","ProfileSection","PostListComponent","useNavigate","fetchProfile","uploadProfileImage","jsxDEV","_jsxDEV","setAppElement","ProfilePage","_s","error","setError","modalIsOpen","setModalIsOpen","modalImage","setModalImage","openCommentId","setOpenCommentId","imageType","setImageType","cropperRef","likedPosts","setLikedPosts","comments","setComments","newComment","setNewComment","replyingToCommentId","setReplyingToCommentId","user","state","token","auth","showEmojiPicker","setShowEmojiPicker","commentText","setCommentText","bookmarkPosts","setbookmarkPosts","loading","setLoading","profile","isFollowing","followerCount","followingCount","posts","bookmarks","postLoading","postError","dispatch","navigate","fetchBookmarks","response","get","headers","Authorization","setBookmarks","data","map","bookmark","post","console","fetchComments","postId","prevComments","log","fetchPosts","id","setPosts","err","userId","length","forEach","fetchLikeStatus","likeStatuses","fetch","method","ok","result","json","liked","fetchBookmarkStatus","bookmarked","handleLogout","handleFileChange","event","type","fileInput","target","file","files","validImageTypes","includes","value","reader","FileReader","onloadend","readAsDataURL","handleImageUpload","current","cropper","canvas","getCroppedCanvas","toBlob","blob","formData","FormData","append","imageBlob","closeModal","openModal","document","getElementById","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleNewPost","postData","content","trim","image","then","res","video","videoBlob","videoSizeMB","size","key","entries","prevPosts","handleLike","body","JSON","stringify","status","prev","handleSubmitComment","parentId","parent","newCommentData","handleToggleComments","handleAddEmoji","emoji","native","handleBookmark","delete","prevState","onPostSubmit","isOpen","onRequestClose","onSave","onClose","ref","_c","$RefreshReg$"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/pages/ProfilePage.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../config';\r\nimport Modal from 'react-modal';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport { logout, updateUserProfileImage } from '../features/auth/userSlice';\r\nimport { showErrorToast } from '../components/ErroToast';\r\nimport ImageCropper from '../components/Cropper';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport PostBox from '../components/ProfilePageComponents/PostBoxComponent';\r\nimport { showSuccessToast } from '../components/CustomToast';\r\nimport ProfileHeader from '../components/ProfilePageComponents/ProfileHeader';\r\nimport ProfileSection from '../components/ProfilePageComponents/ProfileSection';\r\nimport PostListComponent from '../components/ProfilePageComponents/PostListComponent';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { fetchProfile, uploadProfileImage } from '../features/auth/profileSlice';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst ProfilePage = () => {\r\n  const [error, setError] = useState(null);\r\n  //const [posts, setPosts] = useState([]);\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [modalImage, setModalImage] = useState('');\r\n  const [openCommentId, setOpenCommentId] = useState(null); \r\n  const [imageType, setImageType] = useState(''); // 'cover' or 'profile'\r\n  const cropperRef = useRef(null);\r\n  const [likedPosts, setLikedPosts] = useState({});   \r\n  const [comments, setComments] = useState({}); \r\n  const [newComment, setNewComment] = useState(\"\"); \r\n  const [replyingToCommentId, setReplyingToCommentId] = useState(null); \r\n  const user = useSelector((state) => state.user.user);\r\n  const token = useSelector((state) => state.auth.token);\r\n  const [showEmojiPicker, setShowEmojiPicker] = useState(false);\r\n  const [commentText, setCommentText] = useState('');\r\n  //const [bookmarks, setBookmarks] = useState([]);\r\n  const [bookmarkPosts, setbookmarkPosts] = useState({});  \r\n  const [loading, setLoading] = useState(false);\r\n  const { profile, isFollowing, followerCount, followingCount } = useSelector((state) => state.profile);\r\n  const { posts, bookmarks, loading:postLoading, error:postError } = useSelector((state) => state.posts);\r\n  const dispatch = useDispatch()\r\n  const navigate=useNavigate();\r\n\r\n  const fetchBookmarks = async () => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/api/bookmarks`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n      });  // Fetch user's bookmarks\r\n      setBookmarks(response.data.map(bookmark => bookmark.post));\r\n    } catch (error) {\r\n      console.error('Error fetching bookmarks:', error);\r\n    }\r\n  };\r\n  const fetchComments = async (postId) => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/api/posts/${postId}/comments/`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setComments((prevComments) => ({\r\n        ...prevComments,\r\n        [postId]: response.data,\r\n        \r\n      }));\r\n    } catch (error) {\r\n      console.log(\"Error fetching comments\");\r\n    }\r\n  };\r\n\r\n  const fetchPosts = async () => {\r\n    try {\r\n      const response = await axios.get(`${BASE_URL}/api/posts/?user_id=${user.id}`, {\r\n     headers: {\r\n         Authorization: `Bearer ${token}`,\r\n     },\r\n   });\r\n     setPosts(response.data); \r\n     console.log(response.data)// Set the fetched posts\r\n   } catch (err) {\r\n     console.log(\"Error fetching posts\");\r\n   }\r\n  };\r\n  useEffect(() => {\r\n    \r\n\r\n    if (user && token) {\r\n      dispatch(fetchProfile({ userId:user.id, token }));\r\n      fetchPosts();\r\n      fetchBookmarks();\r\n    }\r\n  }, [user, token]);\r\n\r\n  useEffect(() => {\r\n    if (posts.length > 0) {\r\n      posts.forEach((post) => {\r\n        console.log(`Correct post id: ${post.id}`);\r\n        fetchComments(post.id);\r\n      });\r\n    }\r\n  }, [posts]);\r\n\r\n  useEffect(() => {\r\n    const fetchLikeStatus = async () => {\r\n      try {\r\n        const likeStatuses = {};\r\n        for (let post of posts) {\r\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_liked/`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            likeStatuses[post.id] = result.liked; // Assume the response contains { liked: true/false }\r\n            console.log('check liked');\r\n            console.log(result);\r\n          }\r\n        }\r\n        setLikedPosts(likeStatuses);\r\n      } catch (error) {\r\n        console.error('Error fetching like status:', error);\r\n      }\r\n    };\r\n\r\n    const fetchBookmarkStatus = async () => {\r\n      try {\r\n        const bookmarkPosts = {};\r\n        for (let post of posts) {\r\n          const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_bookmarked/`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n\r\n          if (response.ok) {\r\n            const result = await response.json();\r\n            bookmarkPosts[post.id] = result.bookmarked; // Assume the response contains { liked: true/false }\r\n           \r\n          }\r\n        }\r\n        setbookmarkPosts(bookmarkPosts);\r\n      } catch (error) {\r\n        console.error('Error fetching like status:', error);\r\n      }\r\n    };\r\n\r\n    fetchLikeStatus();\r\n    fetchBookmarkStatus();\r\n  }, [posts, token,user]);\r\n\r\n  const handleLogout=()=>{\r\n    dispatch(logout());\r\n    navigate('/login')\r\n  }\r\n\r\n\r\n  const handleFileChange = (event, type) => {\r\n    const fileInput = event.target;\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n      if (!validImageTypes.includes(file.type)) {\r\n        // setError('Please select a valid image file (JPEG, JPG, or PNG).');\r\n        showErrorToast('Please select a valid image file (JPEG, JPG, or PNG).');\r\n        fileInput.value = null; \r\n        return;\r\n      }\r\n    }\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setModalImage(reader.result);\r\n        setImageType(type);\r\n        setModalIsOpen(true);\r\n        fileInput.value = null; \r\n      };\r\n      reader.readAsDataURL(file);\r\n    } else {\r\n      console.error('No file selected.');\r\n    }\r\n  };\r\n\r\n  const handleImageUpload = async () => {\r\n    if (!cropperRef.current) return;\r\n\r\n    const cropper = cropperRef.current.cropper;\r\n    const canvas = cropper.getCroppedCanvas();\r\n    canvas.toBlob(async (blob) => {\r\n      const formData = new FormData();\r\n      formData.append(imageType === 'cover' ? 'cover_pic' : 'profile_pic', blob, 'cropped-image.jpg');\r\n\r\n      try {\r\n       \r\n        dispatch(uploadProfileImage({ imageBlob: blob, imageType, token, userId: user.id }));\r\n\r\n        closeModal();\r\n\r\n      } catch (err) {\r\n        setError('An error occurred while uploading the image.');\r\n      }\r\n    }, 'image/jpeg');\r\n  };\r\n\r\n\r\n  const openModal = (type) => {\r\n    setImageType(type);\r\n    document.getElementById(`${type}-upload`).click(); // Trigger the file input click\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setModalIsOpen(false);\r\n    setModalImage('');\r\n  };\r\n\r\n  if (error) {\r\n    return <div className=\"text-red-500 text-center mt-4\">{error}</div>;\r\n  }\r\n\r\n  if (!profile) {\r\n    return (\r\n      <div className=\"flex justify-center items-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"></div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  const handleNewPost = async (postData) => {\r\n    const userId = user.id;\r\n    setLoading(true);  \r\n    if (!postData.content || postData.content.trim() === '') {\r\n      showErrorToast(\"Content cannot be empty.\");\r\n      setLoading(false); \r\n      return;\r\n    }\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('content', postData.content);\r\n      formData.append('user', user.id);\r\n\r\n      if (postData.image) {\r\n        const imageBlob = await fetch(postData.image).then((res) => res.blob());\r\n        formData.append('image', imageBlob, 'post.jpg');\r\n      }\r\n  \r\n      console.log(`video:${postData.video}`)\r\n      if (postData.video) {\r\n        const videoBlob = await fetch(postData.video).then((res) => res.blob());\r\n        const videoSizeMB = videoBlob.size / (1024 * 1024);\r\n        if (videoSizeMB > 100) {\r\n          showErrorToast(\"Video size exceeds 100MB. Please upload a smaller file.\");\r\n          setLoading(false); \r\n          return; \r\n        }\r\n        formData.append('video', videoBlob, 'post.mp4');\r\n      }\r\n      formData.append('is_approved', true);\r\n      for (const [key, value] of formData.entries()) {\r\n        console.log(`${key}:`, value);\r\n      }\r\n      const response = await axios.post(`${BASE_URL}/api/posts/`, formData, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      \r\n      setPosts((prevPosts) => [response.data, ...prevPosts]);\r\n      showSuccessToast(\"Post successfully submitted\");\r\n    } catch (err) {\r\n       showErrorToast(\"Error while submitting!\")\r\n    }finally {\r\n      setLoading(false);  \r\n    }\r\n  };\r\n  const handleLike = async  (postId) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/api/likes/`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ post: postId }),\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        console.log('Post liked');\r\n        setLikedPosts((prev) => ({ ...prev, [postId]: true }));\r\n      } else if (response.status === 204) {\r\n        console.log('Post unliked');\r\n        setLikedPosts((prev) => ({ ...prev, [postId]: false }));\r\n      } else {\r\n        console.log('Error:', await response.json());\r\n      }\r\n      fetchPosts();\r\n    } catch (error) {\r\n      console.error('Error liking/unliking post:', error);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleSubmitComment = async (postId, commentText, parentId = null) => {\r\n    if (!commentText.trim()) {\r\n      showErrorToast('Empty Comment Box');\r\n      return;\r\n    }\r\n    console.log(postId,commentText,user.id,parentId,token);\r\n    try {\r\n      const response = await axios.post(`${BASE_URL}/api/comments/`, {\r\n        post: postId,\r\n        content: commentText,\r\n        user: user.id,\r\n        parent: parentId, // Include parentId here\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n  \r\n      const newCommentData = response.data;\r\n      setComments((prevComments) => ({\r\n        ...prevComments,\r\n        [postId]: [...(prevComments[postId] || []), newCommentData],\r\n      }));\r\n  \r\n      setNewComment(\"\");\r\n      setReplyingToCommentId(null);\r\n     \r\n      showSuccessToast(\"Comment submitted successfully\");\r\n      fetchPosts();\r\n    } catch (error) {\r\n      showErrorToast(\"Error submitting comment\");\r\n    }\r\n  };\r\n  const handleToggleComments = (postId) => {\r\n    if (openCommentId === postId) {\r\n      setOpenCommentId(null); // Close the comments section if it's already open\r\n    } else {\r\n      setOpenCommentId(postId); // Open the comments section for the specific post\r\n    }\r\n  };\r\n\r\n  const handleAddEmoji = (emoji) => {\r\n    setCommentText((prev) => prev + emoji.native); // Append the selected emoji to the comment text\r\n  };\r\n \r\n\r\n  const handleBookmark = async (postId) => {\r\n    try {\r\n      \r\n      if (bookmarkPosts[postId]) {\r\n        // If already bookmarked, unbookmark the post\r\n        await axios.delete(`${BASE_URL}/api/bookmarks/${postId}`,{\r\n          headers: {\r\n              Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setbookmarkPosts((prevState) => ({\r\n          ...prevState,\r\n          [postId]: false,\r\n        }));\r\n        showErrorToast('Post removed from Bookmarks');\r\n      } else {\r\n        // If not bookmarked, bookmark the post\r\n        await axios.post(`${BASE_URL}/api/bookmarks/`, { post: postId }, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        setbookmarkPosts((prevState) => ({\r\n          ...prevState,\r\n          [postId]: true,\r\n        }));\r\n        showSuccessToast('Added to Bookmarks');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating bookmark:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-3xl mx-auto bg-white shadow-md rounded-md overflow-hidden mt-8\">\r\n      \r\n    {/* Profile Header */}\r\n  \r\n    <ProfileHeader profile={profile} handleFileChange={handleFileChange} openModal={openModal}/>\r\n    {/* Profile Details */}\r\n  <div className=\"p-4 sm:p-6\">\r\n    {/* Profile Section */}\r\n    <ProfileSection user={user} profile={profile} followerCount={followerCount} followingCount={followingCount}/>\r\n{loading && (\r\n      <div className=\"flex justify-center items-center mb-2\">\r\n        <div className=\"animate-spin rounded-full h-16 w-16 border-t-4 border-blue-500 border-solid\"></div>\r\n      </div>\r\n    )}\r\n    {/* PostBox Section */}\r\n    <PostBox onPostSubmit={handleNewPost} />\r\n\r\n  \r\n   \r\n      <PostListComponent \r\n      posts={posts}\r\n      user={user}\r\n      likedPosts={likedPosts}\r\n      handleLike={handleLike}\r\n      handleToggleComments={handleToggleComments}\r\n      handleBookmark={handleBookmark}\r\n      bookmarkPosts={bookmarkPosts}\r\n      openCommentId={openCommentId}\r\n      handleSubmitComment={handleSubmitComment}\r\n      replyingToCommentId={replyingToCommentId}\r\n      setReplyingToCommentId={setReplyingToCommentId}\r\n      setCommentText={setCommentText}\r\n      setShowEmojiPicker={setShowEmojiPicker}\r\n      showEmojiPicker={showEmojiPicker}\r\n      handleAddEmoji={handleAddEmoji}\r\n      comments={comments}\r\n      commentText={commentText}\r\n      />\r\n   \r\n  </div>\r\n\r\n  {/* Cropper Modal */}\r\n  <Modal isOpen={modalIsOpen} onRequestClose={closeModal} className=\"w-full max-w-2xl mx-auto mt-16\">\r\n    <ImageCropper modalImage={modalImage} onSave={handleImageUpload} onClose={closeModal} ref={cropperRef} imageType={imageType}/>\r\n  </Modal>\r\n</div>\r\n\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}