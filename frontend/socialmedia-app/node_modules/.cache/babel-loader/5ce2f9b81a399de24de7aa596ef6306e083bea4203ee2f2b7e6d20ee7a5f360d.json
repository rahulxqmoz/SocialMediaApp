{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n/*\n *! Audio-related methods\n */\n\nmodule.exports = function (proto) {\n  /**\n   * Disable audio in the output\n   *\n   * @method FfmpegCommand#noAudio\n   * @category Audio\n   * @aliases withNoAudio\n   * @return FfmpegCommand\n   */\n  proto.withNoAudio = proto.noAudio = function () {\n    this._currentOutput.audio.clear();\n    this._currentOutput.audioFilters.clear();\n    this._currentOutput.audio('-an');\n    return this;\n  };\n\n  /**\n   * Specify audio codec\n   *\n   * @method FfmpegCommand#audioCodec\n   * @category Audio\n   * @aliases withAudioCodec\n   *\n   * @param {String} codec audio codec name\n   * @return FfmpegCommand\n   */\n  proto.withAudioCodec = proto.audioCodec = function (codec) {\n    this._currentOutput.audio('-acodec', codec);\n    return this;\n  };\n\n  /**\n   * Specify audio bitrate\n   *\n   * @method FfmpegCommand#audioBitrate\n   * @category Audio\n   * @aliases withAudioBitrate\n   *\n   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)\n   * @return FfmpegCommand\n   */\n  proto.withAudioBitrate = proto.audioBitrate = function (bitrate) {\n    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));\n    return this;\n  };\n\n  /**\n   * Specify audio channel count\n   *\n   * @method FfmpegCommand#audioChannels\n   * @category Audio\n   * @aliases withAudioChannels\n   *\n   * @param {Number} channels channel count\n   * @return FfmpegCommand\n   */\n  proto.withAudioChannels = proto.audioChannels = function (channels) {\n    this._currentOutput.audio('-ac', channels);\n    return this;\n  };\n\n  /**\n   * Specify audio frequency\n   *\n   * @method FfmpegCommand#audioFrequency\n   * @category Audio\n   * @aliases withAudioFrequency\n   *\n   * @param {Number} freq audio frequency in Hz\n   * @return FfmpegCommand\n   */\n  proto.withAudioFrequency = proto.audioFrequency = function (freq) {\n    this._currentOutput.audio('-ar', freq);\n    return this;\n  };\n\n  /**\n   * Specify audio quality\n   *\n   * @method FfmpegCommand#audioQuality\n   * @category Audio\n   * @aliases withAudioQuality\n   *\n   * @param {Number} quality audio quality factor\n   * @return FfmpegCommand\n   */\n  proto.withAudioQuality = proto.audioQuality = function (quality) {\n    this._currentOutput.audio('-aq', quality);\n    return this;\n  };\n\n  /**\n   * Specify custom audio filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.audioFilters('filter1');\n   *\n   * @example\n   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.audioFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.audioFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.audioFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#audioFilters\n   * @aliases withAudioFilter,withAudioFilters,audioFilter\n   * @category Audio\n   *\n   * @param {...String|String[]|Object[]} filters audio filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withAudioFilter = proto.withAudioFilters = proto.audioFilter = proto.audioFilters = function (filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));\n    return this;\n  };\n};","map":{"version":3,"names":["utils","require","module","exports","proto","withNoAudio","noAudio","_currentOutput","audio","clear","audioFilters","withAudioCodec","audioCodec","codec","withAudioBitrate","audioBitrate","bitrate","replace","withAudioChannels","audioChannels","channels","withAudioFrequency","audioFrequency","freq","withAudioQuality","audioQuality","quality","withAudioFilter","withAudioFilters","audioFilter","filters","arguments","length","slice","call","Array","isArray","makeFilterStrings"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/node_modules/fluent-ffmpeg/lib/options/audio.js"],"sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Audio-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable audio in the output\n   *\n   * @method FfmpegCommand#noAudio\n   * @category Audio\n   * @aliases withNoAudio\n   * @return FfmpegCommand\n   */\n  proto.withNoAudio =\n  proto.noAudio = function() {\n    this._currentOutput.audio.clear();\n    this._currentOutput.audioFilters.clear();\n    this._currentOutput.audio('-an');\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio codec\n   *\n   * @method FfmpegCommand#audioCodec\n   * @category Audio\n   * @aliases withAudioCodec\n   *\n   * @param {String} codec audio codec name\n   * @return FfmpegCommand\n   */\n  proto.withAudioCodec =\n  proto.audioCodec = function(codec) {\n    this._currentOutput.audio('-acodec', codec);\n\n    return this;\n  };\n\n\n  /**\n   * Specify audio bitrate\n   *\n   * @method FfmpegCommand#audioBitrate\n   * @category Audio\n   * @aliases withAudioBitrate\n   *\n   * @param {String|Number} bitrate audio bitrate in kbps (with an optional 'k' suffix)\n   * @return FfmpegCommand\n   */\n  proto.withAudioBitrate =\n  proto.audioBitrate = function(bitrate) {\n    this._currentOutput.audio('-b:a', ('' + bitrate).replace(/k?$/, 'k'));\n    return this;\n  };\n\n\n  /**\n   * Specify audio channel count\n   *\n   * @method FfmpegCommand#audioChannels\n   * @category Audio\n   * @aliases withAudioChannels\n   *\n   * @param {Number} channels channel count\n   * @return FfmpegCommand\n   */\n  proto.withAudioChannels =\n  proto.audioChannels = function(channels) {\n    this._currentOutput.audio('-ac', channels);\n    return this;\n  };\n\n\n  /**\n   * Specify audio frequency\n   *\n   * @method FfmpegCommand#audioFrequency\n   * @category Audio\n   * @aliases withAudioFrequency\n   *\n   * @param {Number} freq audio frequency in Hz\n   * @return FfmpegCommand\n   */\n  proto.withAudioFrequency =\n  proto.audioFrequency = function(freq) {\n    this._currentOutput.audio('-ar', freq);\n    return this;\n  };\n\n\n  /**\n   * Specify audio quality\n   *\n   * @method FfmpegCommand#audioQuality\n   * @category Audio\n   * @aliases withAudioQuality\n   *\n   * @param {Number} quality audio quality factor\n   * @return FfmpegCommand\n   */\n  proto.withAudioQuality =\n  proto.audioQuality = function(quality) {\n    this._currentOutput.audio('-aq', quality);\n    return this;\n  };\n\n\n  /**\n   * Specify custom audio filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.audioFilters('filter1');\n   *\n   * @example\n   * command.audioFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.audioFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.audioFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.audioFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#audioFilters\n   * @aliases withAudioFilter,withAudioFilters,audioFilter\n   * @category Audio\n   *\n   * @param {...String|String[]|Object[]} filters audio filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withAudioFilter =\n  proto.withAudioFilters =\n  proto.audioFilter =\n  proto.audioFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.audioFilters(utils.makeFilterStrings(filters));\n    return this;\n  };\n};\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;;AAG/B;AACA;AACA;;AAEAC,MAAM,CAACC,OAAO,GAAG,UAASC,KAAK,EAAE;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,KAAK,CAACC,WAAW,GACjBD,KAAK,CAACE,OAAO,GAAG,YAAW;IACzB,IAAI,CAACC,cAAc,CAACC,KAAK,CAACC,KAAK,CAAC,CAAC;IACjC,IAAI,CAACF,cAAc,CAACG,YAAY,CAACD,KAAK,CAAC,CAAC;IACxC,IAAI,CAACF,cAAc,CAACC,KAAK,CAAC,KAAK,CAAC;IAEhC,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEJ,KAAK,CAACO,cAAc,GACpBP,KAAK,CAACQ,UAAU,GAAG,UAASC,KAAK,EAAE;IACjC,IAAI,CAACN,cAAc,CAACC,KAAK,CAAC,SAAS,EAAEK,KAAK,CAAC;IAE3C,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACET,KAAK,CAACU,gBAAgB,GACtBV,KAAK,CAACW,YAAY,GAAG,UAASC,OAAO,EAAE;IACrC,IAAI,CAACT,cAAc,CAACC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,GAAGQ,OAAO,EAAEC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACrE,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEb,KAAK,CAACc,iBAAiB,GACvBd,KAAK,CAACe,aAAa,GAAG,UAASC,QAAQ,EAAE;IACvC,IAAI,CAACb,cAAc,CAACC,KAAK,CAAC,KAAK,EAAEY,QAAQ,CAAC;IAC1C,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEhB,KAAK,CAACiB,kBAAkB,GACxBjB,KAAK,CAACkB,cAAc,GAAG,UAASC,IAAI,EAAE;IACpC,IAAI,CAAChB,cAAc,CAACC,KAAK,CAAC,KAAK,EAAEe,IAAI,CAAC;IACtC,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEnB,KAAK,CAACoB,gBAAgB,GACtBpB,KAAK,CAACqB,YAAY,GAAG,UAASC,OAAO,EAAE;IACrC,IAAI,CAACnB,cAAc,CAACC,KAAK,CAAC,KAAK,EAAEkB,OAAO,CAAC;IACzC,OAAO,IAAI;EACb,CAAC;;EAGD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEtB,KAAK,CAACuB,eAAe,GACrBvB,KAAK,CAACwB,gBAAgB,GACtBxB,KAAK,CAACyB,WAAW,GACjBzB,KAAK,CAACM,YAAY,GAAG,UAASoB,OAAO,EAAE;IACrC,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MACxBF,OAAO,GAAG,EAAE,CAACG,KAAK,CAACC,IAAI,CAACH,SAAS,CAAC;IACpC;IAEA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACN,OAAO,CAAC,EAAE;MAC3BA,OAAO,GAAG,CAACA,OAAO,CAAC;IACrB;IAEA,IAAI,CAACvB,cAAc,CAACG,YAAY,CAACV,KAAK,CAACqC,iBAAiB,CAACP,OAAO,CAAC,CAAC;IAClE,OAAO,IAAI;EACb,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}