{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n/*\n *! Video-related methods\n */\n\nmodule.exports = function (proto) {\n  /**\n   * Disable video in the output\n   *\n   * @method FfmpegCommand#noVideo\n   * @category Video\n   * @aliases withNoVideo\n   *\n   * @return FfmpegCommand\n   */\n  proto.withNoVideo = proto.noVideo = function () {\n    this._currentOutput.video.clear();\n    this._currentOutput.videoFilters.clear();\n    this._currentOutput.video('-vn');\n    return this;\n  };\n\n  /**\n   * Specify video codec\n   *\n   * @method FfmpegCommand#videoCodec\n   * @category Video\n   * @aliases withVideoCodec\n   *\n   * @param {String} codec video codec name\n   * @return FfmpegCommand\n   */\n  proto.withVideoCodec = proto.videoCodec = function (codec) {\n    this._currentOutput.video('-vcodec', codec);\n    return this;\n  };\n\n  /**\n   * Specify video bitrate\n   *\n   * @method FfmpegCommand#videoBitrate\n   * @category Video\n   * @aliases withVideoBitrate\n   *\n   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)\n   * @param {Boolean} [constant=false] enforce constant bitrate\n   * @return FfmpegCommand\n   */\n  proto.withVideoBitrate = proto.videoBitrate = function (bitrate, constant) {\n    bitrate = ('' + bitrate).replace(/k?$/, 'k');\n    this._currentOutput.video('-b:v', bitrate);\n    if (constant) {\n      this._currentOutput.video('-maxrate', bitrate, '-minrate', bitrate, '-bufsize', '3M');\n    }\n    return this;\n  };\n\n  /**\n   * Specify custom video filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.videoFilters('filter1');\n   *\n   * @example\n   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.videoFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.videoFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.videoFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#videoFilters\n   * @category Video\n   * @aliases withVideoFilter,withVideoFilters,videoFilter\n   *\n   * @param {...String|String[]|Object[]} filters video filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withVideoFilter = proto.withVideoFilters = proto.videoFilter = proto.videoFilters = function (filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));\n    return this;\n  };\n\n  /**\n   * Specify output FPS\n   *\n   * @method FfmpegCommand#fps\n   * @category Video\n   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS\n   *\n   * @param {Number} fps output FPS\n   * @return FfmpegCommand\n   */\n  proto.withOutputFps = proto.withOutputFPS = proto.withFpsOutput = proto.withFPSOutput = proto.withFps = proto.withFPS = proto.outputFPS = proto.outputFps = proto.fpsOutput = proto.FPSOutput = proto.fps = proto.FPS = function (fps) {\n    this._currentOutput.video('-r', fps);\n    return this;\n  };\n\n  /**\n   * Only transcode a certain number of frames\n   *\n   * @method FfmpegCommand#frames\n   * @category Video\n   * @aliases takeFrames,withFrames\n   *\n   * @param {Number} frames frame count\n   * @return FfmpegCommand\n   */\n  proto.takeFrames = proto.withFrames = proto.frames = function (frames) {\n    this._currentOutput.video('-vframes', frames);\n    return this;\n  };\n};","map":{"version":3,"names":["utils","require","module","exports","proto","withNoVideo","noVideo","_currentOutput","video","clear","videoFilters","withVideoCodec","videoCodec","codec","withVideoBitrate","videoBitrate","bitrate","constant","replace","withVideoFilter","withVideoFilters","videoFilter","filters","arguments","length","slice","call","Array","isArray","makeFilterStrings","withOutputFps","withOutputFPS","withFpsOutput","withFPSOutput","withFps","withFPS","outputFPS","outputFps","fpsOutput","FPSOutput","fps","FPS","takeFrames","withFrames","frames"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/node_modules/fluent-ffmpeg/lib/options/video.js"],"sourcesContent":["/*jshint node:true*/\n'use strict';\n\nvar utils = require('../utils');\n\n\n/*\n *! Video-related methods\n */\n\nmodule.exports = function(proto) {\n  /**\n   * Disable video in the output\n   *\n   * @method FfmpegCommand#noVideo\n   * @category Video\n   * @aliases withNoVideo\n   *\n   * @return FfmpegCommand\n   */\n  proto.withNoVideo =\n  proto.noVideo = function() {\n    this._currentOutput.video.clear();\n    this._currentOutput.videoFilters.clear();\n    this._currentOutput.video('-vn');\n\n    return this;\n  };\n\n\n  /**\n   * Specify video codec\n   *\n   * @method FfmpegCommand#videoCodec\n   * @category Video\n   * @aliases withVideoCodec\n   *\n   * @param {String} codec video codec name\n   * @return FfmpegCommand\n   */\n  proto.withVideoCodec =\n  proto.videoCodec = function(codec) {\n    this._currentOutput.video('-vcodec', codec);\n    return this;\n  };\n\n\n  /**\n   * Specify video bitrate\n   *\n   * @method FfmpegCommand#videoBitrate\n   * @category Video\n   * @aliases withVideoBitrate\n   *\n   * @param {String|Number} bitrate video bitrate in kbps (with an optional 'k' suffix)\n   * @param {Boolean} [constant=false] enforce constant bitrate\n   * @return FfmpegCommand\n   */\n  proto.withVideoBitrate =\n  proto.videoBitrate = function(bitrate, constant) {\n    bitrate = ('' + bitrate).replace(/k?$/, 'k');\n\n    this._currentOutput.video('-b:v', bitrate);\n    if (constant) {\n      this._currentOutput.video(\n        '-maxrate', bitrate,\n        '-minrate', bitrate,\n        '-bufsize', '3M'\n      );\n    }\n\n    return this;\n  };\n\n\n  /**\n   * Specify custom video filter(s)\n   *\n   * Can be called both with one or many filters, or a filter array.\n   *\n   * @example\n   * command.videoFilters('filter1');\n   *\n   * @example\n   * command.videoFilters('filter1', 'filter2=param1=value1:param2=value2');\n   *\n   * @example\n   * command.videoFilters(['filter1', 'filter2']);\n   *\n   * @example\n   * command.videoFilters([\n   *   {\n   *     filter: 'filter1'\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: 'param=value:param=value'\n   *   }\n   * ]);\n   *\n   * @example\n   * command.videoFilters(\n   *   {\n   *     filter: 'filter1',\n   *     options: ['value1', 'value2']\n   *   },\n   *   {\n   *     filter: 'filter2',\n   *     options: { param1: 'value1', param2: 'value2' }\n   *   }\n   * );\n   *\n   * @method FfmpegCommand#videoFilters\n   * @category Video\n   * @aliases withVideoFilter,withVideoFilters,videoFilter\n   *\n   * @param {...String|String[]|Object[]} filters video filter strings, string array or\n   *   filter specification array, each with the following properties:\n   * @param {String} filters.filter filter name\n   * @param {String|String[]|Object} [filters.options] filter option string, array, or object\n   * @return FfmpegCommand\n   */\n  proto.withVideoFilter =\n  proto.withVideoFilters =\n  proto.videoFilter =\n  proto.videoFilters = function(filters) {\n    if (arguments.length > 1) {\n      filters = [].slice.call(arguments);\n    }\n\n    if (!Array.isArray(filters)) {\n      filters = [filters];\n    }\n\n    this._currentOutput.videoFilters(utils.makeFilterStrings(filters));\n\n    return this;\n  };\n\n\n  /**\n   * Specify output FPS\n   *\n   * @method FfmpegCommand#fps\n   * @category Video\n   * @aliases withOutputFps,withOutputFPS,withFpsOutput,withFPSOutput,withFps,withFPS,outputFPS,outputFps,fpsOutput,FPSOutput,FPS\n   *\n   * @param {Number} fps output FPS\n   * @return FfmpegCommand\n   */\n  proto.withOutputFps =\n  proto.withOutputFPS =\n  proto.withFpsOutput =\n  proto.withFPSOutput =\n  proto.withFps =\n  proto.withFPS =\n  proto.outputFPS =\n  proto.outputFps =\n  proto.fpsOutput =\n  proto.FPSOutput =\n  proto.fps =\n  proto.FPS = function(fps) {\n    this._currentOutput.video('-r', fps);\n    return this;\n  };\n\n\n  /**\n   * Only transcode a certain number of frames\n   *\n   * @method FfmpegCommand#frames\n   * @category Video\n   * @aliases takeFrames,withFrames\n   *\n   * @param {Number} frames frame count\n   * @return FfmpegCommand\n   */\n  proto.takeFrames =\n  proto.withFrames =\n  proto.frames = function(frames) {\n    this._currentOutput.video('-vframes', frames);\n    return this;\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}