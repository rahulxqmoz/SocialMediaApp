{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { BASE_URL } from '../../config';\nexport const fetchBookmarkStatus = createAsyncThunk('bookmarkPosts/fetchBookmarkStatus', async ({\n  posts,\n  token\n}) => {\n  const bookmarkPosts = {};\n  for (let post of posts) {\n    const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_bookmarked/`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.ok) {\n      const result = await response.json();\n      bookmarkPosts[post.id] = result.bookmarked; // Assume the response contains { bookmarked: true/false }\n    }\n  }\n  return bookmarkPosts;\n});\nconst bookmarkPostsSlice = createSlice({\n  name: 'bookmarkPosts',\n  initialState: {},\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchBookmarkStatus.fulfilled, (state, action) => {\n      return {\n        ...state,\n        ...action.payload\n      };\n    });\n    // .addCase(handleBookmark.fulfilled, (state, action) => {\n    //   state[action.payload.postId] = action.payload.bookmarked;\n    // })\n    // .addCase(handleBookmark.fulfilled, (state, action) => {\n    //   const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\n    //   if (postIndex !== -1) {\n    //     state.posts[postIndex].bookmarked = action.payload.bookmarked;\n    //   }\n    // });\n  }\n});\nexport default bookmarkPostsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","BASE_URL","fetchBookmarkStatus","posts","token","bookmarkPosts","post","response","fetch","id","method","headers","Authorization","ok","result","json","bookmarked","bookmarkPostsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["H:/SecondProject-DjangoReact/frontend/socialmedia-app/src/features/auth/bookmarkSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from '../../config';\r\n\r\n\r\n\r\nexport const fetchBookmarkStatus = createAsyncThunk(\r\n  'bookmarkPosts/fetchBookmarkStatus',\r\n  async ({ posts, token }) => {\r\n    const bookmarkPosts = {};\r\n    for (let post of posts) {\r\n      const response = await fetch(`${BASE_URL}/api/posts/${post.id}/check_bookmarked/`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        bookmarkPosts[post.id] = result.bookmarked; // Assume the response contains { bookmarked: true/false }\r\n      }\r\n    }\r\n    return bookmarkPosts;\r\n  }\r\n);\r\n\r\n\r\n\r\nconst bookmarkPostsSlice = createSlice({\r\n  name: 'bookmarkPosts',\r\n  initialState: {},\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchBookmarkStatus.fulfilled, (state, action) => {\r\n        return { ...state, ...action.payload };\r\n      })\r\n      // .addCase(handleBookmark.fulfilled, (state, action) => {\r\n      //   state[action.payload.postId] = action.payload.bookmarked;\r\n      // })\r\n      // .addCase(handleBookmark.fulfilled, (state, action) => {\r\n      //   const postIndex = state.posts.findIndex(post => post.id === action.payload.postId);\r\n      //   if (postIndex !== -1) {\r\n      //     state.posts[postIndex].bookmarked = action.payload.bookmarked;\r\n      //   }\r\n      // });\r\n  },\r\n});\r\n\r\nexport default bookmarkPostsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,cAAc;AAIvC,OAAO,MAAMC,mBAAmB,GAAGH,gBAAgB,CACjD,mCAAmC,EACnC,OAAO;EAAEI,KAAK;EAAEC;AAAM,CAAC,KAAK;EAC1B,MAAMC,aAAa,GAAG,CAAC,CAAC;EACxB,KAAK,IAAIC,IAAI,IAAIH,KAAK,EAAE;IACtB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,cAAcK,IAAI,CAACG,EAAE,oBAAoB,EAAE;MACjFC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,aAAa,EAAE,UAAUR,KAAK;MAChC;IACF,CAAC,CAAC;IACF,IAAIG,QAAQ,CAACM,EAAE,EAAE;MACf,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCV,aAAa,CAACC,IAAI,CAACG,EAAE,CAAC,GAAGK,MAAM,CAACE,UAAU,CAAC,CAAC;IAC9C;EACF;EACA,OAAOX,aAAa;AACtB,CACF,CAAC;AAID,MAAMY,kBAAkB,GAAGnB,WAAW,CAAC;EACrCoB,IAAI,EAAE,eAAe;EACrBC,YAAY,EAAE,CAAC,CAAC;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACrB,mBAAmB,CAACsB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACzD,OAAO;QAAE,GAAGD,KAAK;QAAE,GAAGC,MAAM,CAACC;MAAQ,CAAC;IACxC,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;AACF,CAAC,CAAC;AAEF,eAAeV,kBAAkB,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}